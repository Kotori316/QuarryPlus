import java.util.stream.Collectors
import java.util.stream.Stream

plugins {
    id("com.kotori316.common")
    id("com.kotori316.jars")
    id("com.kotori316.publishments")
    id("scala")
    id("net.minecraftforge.gradle") version("[6.0,6.2)")
    id("org.parchmentmc.librarian.forgegradle") version("1.+")
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

compileScala {
    scalaCompileOptions.additionalParameters = ["-Wconf:cat=deprecation:w,any:e"]
}

minecraft {
    mappings channel: "parchment", version: ((project.parchmentMapping + "-" + project.minecraftVersion) as String)
//    mappings channel: "official", version: (project.minecraftVersion as String)

    runs {
        configureEach {
            property("forge.logging.markers", "")
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            property("mixin.debug.export", "true")
            property("forge.logging.console.level", "debug")
        }

        client {
            workingDirectory project.file("Minecraft")
            property("forge.enabledGameTestNamespaces", "QuarryPlus".toLowerCase())
            // From https://github.com/SlimeKnights/TinkersConstruct/blob/1.18/build.gradle
            if (project.hasProperty("mc_uuid")) {
                // Your uuid without any dashes in the middle
                args("--uuid", project.getProperty("mc_uuid"))
            }
            if (project.hasProperty("mc_username")) {
                // Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args("--username", project.getProperty("mc_username"))
            }
            // Your access token, you can find it in your ".minecraft/launcher_profiles.json" file
            // If not set, use "0" to prevent authentication exception.
            args("--accessToken", project.findProperty("mc_token") ?: "0")
            jvmArgs("-EnableAssertions".toLowerCase())

            mods {
                quarryplus {
                    source(sourceSets.main)
                    // source(sourceSets.test)
                }
            }
            lazyToken("minecraft_classpath") {
                configurations.game_test.collect { it.absolutePath }.join(File.pathSeparator)
            }
        }

        client2 {
            parent(runs.client)
            workingDirectory project.file("run-server-client")
            property("forge.enabledGameTestNamespaces", "")
            property("forge.enableGameTest", "false")
            mods {
                quarryplus {
                    source(sourceSets.main)
                }
            }
        }

        server {
            workingDirectory project.file("run-server")

            // Recommended logging data for a userdev environment
            args("--nogui")

            mods {
                quarryplus {
                    source(sourceSets.main)
                }
            }
        }

        data {
            workingDirectory project.file("run-server")
            args("--mod", "quarryplus", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/"))

            mods {
                quarryplus {
                    source(sourceSets.main)
                    source(sourceSets.test)
                }
            }
        }

        gameTestServer {
            workingDirectory project.file("game-test")
            property("forge.enabledGameTestNamespaces", "QuarryPlus".toLowerCase())
            jvmArgs("-EnableAssertions".toLowerCase())

            mods {
                quarryplus {
                    source(sourceSets.main)
                    source(sourceSets.test)
                }
            }
            lazyToken("minecraft_classpath") {
                configurations.game_test.collect { it.absolutePath }.join(File.pathSeparator)
            }
        }
    }
}

dependencies {
    String forgeVersion = System.getenv("CI_FORGE") ?: project.forgeVersion
    minecraft("net.minecraftforge:forge:" + forgeVersion)
    compileOnly(group: "org.scala-lang", name: "scala-library", version: project.scalaVersion)
    // compileOnly(group: "org.scala-lang", name: "scala3-library_3", version: project.scala3Version)
    compileOnly(group: "org.typelevel", name: "cats-core_3", version: project.catsVersion) {
        exclude(group: 'org.scala-lang', module: 'scala3-library_3')
    }
    testImplementation(group: "org.scala-lang", name: "scala-library", version: project.scalaVersion)
    // testImplementation(group: "org.scala-lang", name: "scala3-library_3", version: project.scala3Version)
    testImplementation(group: "org.typelevel", name: "cats-core_3", version: project.catsVersion) {
        exclude(group: 'org.scala-lang', module: 'scala3-library_3')
    }

    boolean useREI = false // Boolean.parseBoolean(System.getenv("USE_REI"))
    compileOnly(fg.deobf(group: "mezz.jei", name: "jei-1.20.2-common-api", version: project.jeiVersion))
    compileOnly(fg.deobf(group: "mezz.jei", name: "jei-1.20.2-forge-api", version: project.jeiVersion))
    if (useREI) {
        implementation(fg.deobf(group: "me.shedaniel", name: "RoughlyEnoughItems-forge", version: project.reiVersion))
        implementation(fg.deobf(group: "me.shedaniel.cloth", name: "cloth-config-forge", version: project.clothVersion))
        implementation(fg.deobf(group: "dev.architectury", name: "architectury-forge", version: project.architecturyVersion))
    } else {
        runtimeOnly(fg.deobf(group: "mezz.jei", name: "jei-1.20.2-forge", version: project.jeiVersion) {
            transitive(false)
        })
        compileOnly(fg.deobf(group: "me.shedaniel", name: "RoughlyEnoughItems-forge", version: project.reiVersion))
        compileOnly(fg.deobf(group: "me.shedaniel.cloth", name: "cloth-config-forge", version: project.clothVersion))
        compileOnly(fg.deobf(group: "dev.architectury", name: "architectury-forge", version: project.architecturyVersion))
    }
    runtimeOnly(group: "com.kotori316", name: "ScalableCatsForce".toLowerCase(), version: project.slpVersion, classifier: "with-library") {
        transitive(false)
    }

    boolean enableFTB = false // Boolean.parseBoolean(System.getenv("USE_FTB"))
    if (enableFTB) { // FTB Chunks stuff
        implementation(fg.deobf(group: "dev.ftb.mods", name: "ftb-chunks-forge", version: project.ftbChunksVersion))
        implementation(fg.deobf(group: "dev.ftb.mods", name: "ftb-library-forge", version: project.ftbLibraryVersion))
        runtimeOnly(fg.deobf(group: "dev.ftb.mods", name: "ftb-teams-forge", version: project.ftbTeamsVersion))
        implementation(fg.deobf(group: "dev.architectury", name: "architectury-forge", version: project.architecturyVersion))
    } else {
        compileOnly(fg.deobf(group: "dev.ftb.mods", name: "ftb-chunks-forge", version: project.ftbChunksVersion))
        compileOnly(fg.deobf(group: "dev.ftb.mods", name: "ftb-library-forge", version: project.ftbLibraryVersion))
    }

    // IC2 Classic
    if (false) {
        // if (System.getenv("IGNORE_OTHER_MODS_IN_RUNTIME") == null) {
        compileOnly(fg.deobf(group: "curse.maven", name: "ic2-classic-242942", version: project.ic2ClassicId))
        testImplementation(fg.deobf(group: "curse.maven", name: "ic2-classic-242942", version: project.ic2ClassicId))
    } else {
        compileOnly(fg.deobf(group: "curse.maven", name: "ic2-classic-242942", version: project.ic2ClassicId))
        // testCompileOnly(fg.deobf(group: "curse.maven", name: "ic2-classic-242942", version: project.ic2ClassicId))
    }

    // Test Dependencies.
    // Required these libraries to execute the tests.
    // The library will avoid errors of ForgeRegistry and Capability.
    implementation(fg.deobf(group: "com.kotori316", name: "test_utility", version: project.testUtilVersion))
    implementation(group: "com.kotori316", name: "test_utility_dependency", version: "2.0-SNAPSHOT") {
        exclude(group: 'org.scala-lang', module: 'scala3-library_3')
    }

    game_test(group: "org.junit.jupiter", name: "junit-jupiter-api", version: project.jupiterVersion)
    game_test(group: "org.junit.jupiter", name: "junit-jupiter-params", version: project.jupiterVersion)
    game_test(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: project.jupiterVersion)
    game_test(group: "org.junit.platform", name: "junit-platform-launcher", version: project.jupiterPlatformVersion)
}

tasks.named("jar", org.gradle.jvm.tasks.Jar).configure {
    finalizedBy("reobfJar", "jksSignJar")
}

tasks.register("jksSignJar", com.kotori316.common.JarSignTask.class) {
    dependsOn("reobfJar")
    jarTask = (project.tasks.jar as org.gradle.jvm.tasks.Jar)
}

String getShortChangelog(boolean includeVersion) {
    def f = file("temp_changelog.md")
    if (f.exists()) {
        String version = f.readLines().find { s -> s.startsWith("#") }
        def content = f.readLines()
                .drop(4 - 2)
                .takeWhile { s -> !s.isEmpty() }
                .stream() as Stream<String>
        if (includeVersion) {
            return Stream.concat(
                    Stream.of(version, ""),
                    content
            ).collect(Collectors.joining(System.lineSeparator()))
        } else {
            content.collect(Collectors.joining(System.lineSeparator()))
        }

    } else {
        return version.toString()
    }
}

name: Build Check and Publish

on:
  workflow_dispatch:
  push:
    branches:
      - "1.20-fabric"
    tags:
      - "!*"
    paths:
      - "src/**"
      - ".github/workflows/gradle.yml"
      - "build.gradle"
      - "gradle.properties"
  pull_request:
    branches:
      - "1.20-fabric"

jobs:
  commit-info:
    runs-on: ubuntu-latest
    steps:
      - name: Log Commit
        env:
          COMMIT_CONTEXT: ${{ toJSON(github.event) }}
        run: echo ${COMMIT_CONTEXT} | jq
      - name: Show commit messages
        run: echo "${MESSAGES}" | jq
        env:
          MESSAGES: ${{ toJSON(github.event.commits.*.message) }}
      - name: Check Publish ${{ !contains(github.event.head_commit.message, '[skip release]') && github.event_name != 'pull_request' }}
        run: echo "Release ${{ !contains(github.event.head_commit.message, '[skip release]') && github.event_name != 'pull_request' }}"

  build:
    runs-on: ubuntu-latest
    env:
      DO_RELEASE: >-
        ${{ 
          (!contains(github.event.head_commit.message, '[skip release]') &&
          github.event_name != 'pull_request') && 'true' || 'false'
        }}
    steps:
      - uses: actions/checkout@v3
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: 'temurin'
      - run: chmod +x ./gradlew
      - uses: gradle/gradle-build-action@v2
        with:
          cache-read-only: false
          gradle-home-cache-cleanup: true
      - name: Enable daemon
        run: sed -i -e 's/org.gradle.daemon=false/org.gradle.daemon=true/' gradle.properties
      - name: Check Warning
        run: ./gradlew javaToolchains checkCompileOption --warning-mode all
      - name: Check compile
        run: ./gradlew build
      - name: RunData
        run: ./gradlew runData
      - name: GameTest
        run: ./gradlew runGameTest
        env:
          RUN_GAME_TEST: true
      - uses: google-github-actions/auth@v1
        if: ${{fromJson(env.DO_RELEASE)}}
        with:
          workload_identity_provider: ${{secrets.GCP_IDENTITY_PROVIDER}}
          service_account: ${{secrets.GCP_SERVICE_ACCOUNT}}
      - name: Download Private Key
        if: ${{fromJson(env.DO_RELEASE)}}
        run: gcloud storage cp gs://kotori316-resources/secring.gpg "${HOME}/secring.gpg"
      - name: Download JKS
        if: ${{fromJson(env.DO_RELEASE)}}
        run: gcloud storage cp gs://kotori316-resources/kotori316_keystore.jks "${HOME}/kotori316_keystore.jks"
      - name: Download Public Key
        if: ${{fromJson(env.DO_RELEASE)}}
        run: |
          gcloud storage cp gs://kotori316-resources/pgp_public.pub "${HOME}/pgp_public.pub"
          gpg --import "${HOME}/pgp_public.pub"
      - name: Get credentials
        if: ${{fromJson(env.DO_RELEASE)}}
        id: get-secrets
        run: |
          key_id=$(gcloud secrets versions access latest --secret=signing-key-id)
          key_password=$(gcloud secrets versions access latest --secret=signing-password)
          jar_password=$(gcloud secrets versions access latest --secret=jar-sign-key-password)
          modrinth_token=$(gcloud secrets versions access latest --secret=modrinth_token)
          curseforge_token=$(gcloud secrets versions access latest --secret=curseforge_token)
          azure_token=$(gcloud secrets versions access latest --secret=azure_token)
          echo "::add-mask::${key_id}"
          echo "::add-mask::${key_password}"
          echo "::add-mask::${jar_password}"
          echo "::add-mask::${modrinth_token}"
          echo "::add-mask::${curseforge_token}"
          echo "::add-mask::${azure_token}"
          echo "key_id=${key_id}" >> $GITHUB_OUTPUT
          echo "key_password=${key_password}" >> $GITHUB_OUTPUT
          echo "jar_password=${jar_password}" >> $GITHUB_OUTPUT
          echo "modrinth_token=${modrinth_token}" >> $GITHUB_OUTPUT
          echo "curseforge_token=${curseforge_token}" >> $GITHUB_OUTPUT
          echo "azure_token=${azure_token}" >> $GITHUB_OUTPUT
      - name: Test and Publish
        if: ${{fromJson(env.DO_RELEASE)}}
        run: >-
          ./gradlew
          -Psigning.secretKeyRingFile="${HOME}/secring.gpg"
          -Psigning.password="${KEY_PASSWORD}"
          -Psigning.keyId="${KEY_ID}"
          -PjarSign.keyLocation="${HOME}/kotori316_keystore.jks"
          -PjarSign.keyAlias="ko316"
          -PjarSign.storePass="${JAR_PASSWORD}"
          clean build publishToMavenLocal curseforge modrinth publish
        env:
          KEY_PASSWORD: ${{steps.get-secrets.outputs.key_password}}
          KEY_ID: ${{steps.get-secrets.outputs.key_id}}
          JAR_PASSWORD: ${{steps.get-secrets.outputs.jar_password}}
          AZURE_TOKEN: ${{steps.get-secrets.outputs.azure_token}}
          CURSE_TOKEN: ${{steps.get-secrets.outputs.curseforge_token}}
          MODRINTH_TOKEN: ${{steps.get-secrets.outputs.modrinth_token}}
      - name: Upload Artifacts
        if: ${{fromJson(env.DO_RELEASE)}}
        uses: actions/upload-artifact@v3
        with:
          path: build/libs/*
          name: ${{ github.event.repository.name }}-${{ github.run_number }}

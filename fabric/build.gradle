plugins {
    id("com.kotori316.common")
    id("com.kotori316.jars")
    id("com.kotori316.publishments")
    // id("scala")
    id("idea")
    // https://maven.fabricmc.net/net/fabricmc/fabric-loom/
    id 'fabric-loom' version "1.2-SNAPSHOT"
}

loom {
    runs {
        client {
            configName = "Client"
            runDir = Boolean.parseBoolean(System.getenv("FABRIC_SERVER")) ? "run-server" : "run"
            programArgs(List.of("--username", "Kotori"))
        }
        server {
            configName = "Server"
            runDir = "run-server"
        }
        data {
            client()
            configName = "Data"
            runDir = "run-server"
            //noinspection SpellCheckingInspection
            property("fabric-api.datagen")
            //noinspection SpellCheckingInspection
            property("fabric-api.datagen.output-dir", "${file("src/generated/resources")}")
            //noinspection SpellCheckingInspection
            property("fabric-api.datagen.strict-validation")

            ideConfigGenerated = true
            source sourceSets.test
        }
        gameTest {
            name "GameTest"
            server()
            vmArg "-ea"
            //noinspection SpellCheckingInspection
            property("fabric-api.gametest")
            //noinspection SpellCheckingInspection
            property("fabric-api.gametest.report-file", "${project.buildDir}/test-results/test/game_test.xml")
            runDir = "build/game_test"
            source sourceSets.test
        }
    }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modRuntimeOnly(group: "com.kotori316", name: "scalable-cats-force-fabric", version: project.kotori_scala_version) {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "net.fabricmc")
        exclude(group: "org.typelevel")
    }

    // library
    implementation "com.google.code.findbugs:jsr305:3.0.1"

    modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "net.fabricmc")
    }
    modImplementation("teamreborn:energy:${project.tech_energy_version}")
    modCompileOnly("mcp.mobius.waila:wthit-api:fabric-${project.wthit_version}")
    if (System.getenv("CI")) {
        // In CI, modCompileOnly
        modCompileOnly("RebornCore:RebornCore-1.20:${project.RebornCore_version}") {
            transitive = false
        }
        modCompileOnly("TechReborn:TechReborn-1.20:${project.TechReborn_version}") {
            transitive = false
        }
        modCompileOnly(group: "curse.maven", name: "jade-324717", version: project.jade_id)
    } else {
        // In development env, modImplementation or modRuntimeOnly
        modCompileOnly("RebornCore:RebornCore-1.20:${project.RebornCore_version}") {
            transitive = false
        }
        modCompileOnly("TechReborn:TechReborn-1.20:${project.TechReborn_version}") {
            transitive = false
        }
        modRuntimeOnly("mcp.mobius.waila:wthit:fabric-${project.wthit_version}")
        modRuntimeOnly(group: "lol.bai", name: "badpackets", version: "fabric-${project.badpackets_version}")
        modImplementation(group: "curse.maven", name: "jade-324717", version: project.jade_id)
    }

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "net.fabricmc")
    }
    modApi("com.terraformersmc:modmenu:${project.mod_menu_version}") {
        transitive = false
    }

    // Runtime Checks
    // if (!System.getenv("RUN_GAME_TEST")) modRuntimeOnly("alexiil.mc.mod:simplepipes-all:${project.simple_pipe_version}")
    // modRuntimeOnly("curse.maven:carpet-349239:3725895")
    // modRuntimeOnly("curse.maven:mining-dimensions-fabric-442921:3566587")
    // noinspection SpellCheckingInspection
    // modRuntimeOnly("net.kyrptonaught:customportalapi:0.0.1-beta47-1.18")

    // Test Dependencies.
    testImplementation(group: 'net.fabricmc', name: 'fabric-loader-junit', version: project.loader_version)
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.2')
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.6.2')
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.2')
    testImplementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.6.2')
}

sourceSets {
    main {
        java {
            srcDir 'src/main/scala'
        }
    }
}

remapJar.finalizedBy("jksSignJar")

tasks.register("jksSignJar", com.kotori316.common.JarSignTask.class) {
    dependsOn(project.tasks.remapJar)
    jarTask = (project.tasks.remapJar as org.gradle.jvm.tasks.Jar)
}

import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.util.concurrent.TimeUnit
import java.util.stream.Collectors
import java.util.stream.Stream

buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        maven { url = "https://plugins.gradle.org/m2/" }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}
plugins {
    id("maven-publish")
    id("scala")
    id "com.github.breadmoirai.github-release" version "2.2.12"
}
apply plugin: 'net.minecraftforge.gradle'
apply plugin: "com.matthewprenger.cursegradle"
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = project.modVersion
group = 'com.kotori316' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'AdditionalEnchantedMiner-1.17'

// Mojang ships Java 16 to end users in 1.17+ instead of Java 8 in 1.16 or lower, so your mod should target Java 16.
java.toolchain.languageVersion = JavaLanguageVersion.of(16)

@SuppressWarnings("SpellCheckingInspection")
private static boolean isInCI() {
    return Boolean.parseBoolean(System.getenv("GITHUB_ACTIONS")) || Boolean.parseBoolean(System.getenv("CI")) ||
            (!System.getProperty("os.name").toLowerCase().startsWith("windows") && Files.exists(Paths.get("/", ".dockerenv")))
}

println("Java: ${System.getProperty('java.version')} " +
        "JVM: ${System.getProperty('java.vm.version')}(${System.getProperty('java.vendor')}) " +
        "Arch: ${System.getProperty('os.arch')}")
minecraft {
    mappings channel: 'official', version: '1.17.1'

    runs {
        client {
            workingDirectory project.file('Minecraft')
            property 'forge.logging.markers', 'REGISTRIES'
            property('mixin.env.remapRefMap', 'true')
            property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
            property "mixin.debug.export", "true"
            property 'forge.logging.console.level', 'debug'

            mods {
                quarryplus {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property('mixin.env.remapRefMap', 'true')
            property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
            property "mixin.debug.export", "true"
            property 'forge.logging.console.level', 'info'
            forceExit false

            mods {
                quarryplus {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run-server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property('mixin.env.remapRefMap', 'true')
            property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
            property "mixin.debug.export", "true"
            property 'forge.logging.console.level', 'info'
            forceExit false
            args '--mod', 'quarryplus', '--all', '--output', file('src/generated/resources/')

            mods {
                quarryplus {
                    source sourceSets.main
                }
            }
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        //noinspection SpellCheckingInspection
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
        content {
            includeGroup("mezz.jei")
        }
    }
    /*maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven-k-4u.nl"
        url = "https://modmaven.dev/"
    }*/
    maven {
        name = "CraftTweaker"
        url = 'https://maven.blamejared.com'
        content {
            //noinspection SpellCheckingInspection
            includeModule("com.blamejared.crafttweaker", "CraftTweaker-1.16.4")
        }
    }
    maven {
        name = "FTB OLD"
        url = "https://maven.latmod.com/"
        content {
            includeModule("com.feed_the_beast.mods", "ftb-chunks")
            includeModule("com.feed_the_beast.mods", "ftb-gui-library")
        }
    }

    maven {
        name = "FTB NEW"
        url = "https://maven.saps.dev/minecraft/"
        content {
            includeModule("dev.ftb.mods", "ftb-chunks-forge")
            includeModule("dev.ftb.mods", "ftb-library-forge")
        }
    }

    maven {
        name = "Azure-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            it.includeModule("com.kotori316", "ScalableCatsForce".toLowerCase())
            it.includeVersion("org.typelevel", "cats-core_2.13", "2.6.2-kotori")
            it.includeVersion("org.typelevel", "cats-kernel_2.13", "2.6.2-kotori")
        }
    }

    repositories.stream().filter { it instanceof MavenArtifactRepository }.forEach { repo ->
        repo.content {
            excludeVersionByRegex(".*", ".*", ".*_mapped_snapshot_.*")
        }
    }
}

dependencies {
    String forgeVersion = System.getenv("CI_FORGE") ?: project.forgeVersion
    minecraft('net.minecraftforge:forge:' + forgeVersion)
    System.out.println(('Selected version: ' + 'net.minecraftforge:forge:' + forgeVersion) as String)
    compileOnly(group: 'org.scala-lang', name: 'scala-library', version: '2.13.7')
    compileOnly(group: 'org.typelevel', name: "cats-core_2.13", version: '2.6.2-kotori')

    implementation fg.deobf("mezz.jei:jei-1.17.1:" + project.jeiVersion)
    runtimeOnly(group: "com.kotori316", name: "ScalableCatsForce".toLowerCase(), version: "2.13.7-build-1", classifier: "with-library") {
        transitive(false)
    }

    // Test Dependencies.
    final def JUPITER_VERSION = '5.7.0'
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: JUPITER_VERSION)
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: JUPITER_VERSION)
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: JUPITER_VERSION)
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
    testImplementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.7.0')
}

// Example for how to get properties into the manifest for reading at runtime.
def jarAttributeMap = [
        "Specification-Title"     : project.name,
        "Specification-Vendor"    : "Kotori316",
        "Specification-Version"   : "1", // We are version 1 of ourselves
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : project.version,
        "Implementation-Vendor"   : "Kotori316",
        "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
        "Commit"                  : getCommit("1.17"),
        'Automatic-Module-Name'   : 'quarryplus',
]

jar {
    manifest {
        attributes(jarAttributeMap)
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/generated/resources'
        }
    }
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set("sources")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set("deobf")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(jarAttributeMap)
    }
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

jar.finalizedBy('signJar')

task signJar(dependsOn: 'reobfJar') {
    boolean executeCondition = project.hasProperty('keyStoreAlias') &&
            project.hasProperty('keyStore') &&
            project.hasProperty('keyStorePass')
    onlyIf { executeCondition }
    doLast {
        //noinspection HttpUrlsUsage
        ant.signjar(
                jar: jar.archiveFile.get(),
                alias: project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : "",
                keystore: project.hasProperty('keyStore') ? project.getProperty("keyStore") : "",
                storepass: project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : "",
                sigalg: "SHA1withRSA",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com"
        )
    }
}

def curseForgeLog() {
    def header = ("""\
            For Minecraft 1.17.1 and Minecraft Forge
            Released at ${ZonedDateTime.now(ZoneId.of('Asia/Tokyo')).withNano(0).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)}

            This mod requires [Scalable Cat's Force](https://www.curseforge.com/minecraft/mc-mods/scalable-cats-force)
            Build with ${project.forgeVersion}, Mapping: Official 1.17.1
            """ as String).stripIndent() + System.lineSeparator() * 2
    def file = new File("temp_changelog.md")
    def fileText = file.exists() ? file.text : "No changelog provided."
    return header + fileText
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '282837'
        changelogType = 'markdown'
        changelog = curseForgeLog()
        releaseType = 'release'
        addGameVersion '1.17.1'
        mainArtifact(jar) {
            displayName = 'v' + project.version + '-forge'
        }
        addArtifact deobfJar
        addArtifact srcJar
        relations {
            requiredDependency 'scalable-cats-force'
        }
    }
    options {
        curseGradleOptions.debug = false // defaults to false
        javaVersionAutoDetect = false
    }
}

githubRelease {
    repo.set('QuarryPlus')
    token = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN") ?: ""
    targetCommitish.set('1.17')
    prerelease.set(project.version.toString().contains("SNAPSHOT"))
    body.set(getChangeLog() +
            System.lineSeparator() * 2 +
            "Build with ${project.forgeVersion}, Mapping: Official 1.17.1")
    releaseAssets = files(
            jar.getArchiveFile().get(),
            deobfJar.getArchiveFile().get(),
            srcJar.getArchiveFile().get()
    )
}

test {
    useJUnitPlatform()
}

/*task signJar(type: net.minecraftforge.gradle.common.task.SignJar) {
    alias = project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : ""
    keyStore = project.hasProperty('keyStore') ? project.getProperty("keyStore") : ""
    storePass = project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : ""
    keyPass = project.hasProperty("keyStoreKeyPass") ? project.getProperty('keyStoreKeyPass') : ""

    inputFile = jar.archiveFile.get()
    outputFile = jar.archiveFile.get()

    onlyIf {
        project.hasProperty('keyStoreAlias') &&
                project.hasProperty('keyStore') &&
                project.hasProperty('keyStorePass')
    }
}*/

if (!isInCI()) {
    //assemble.dependsOn(signJar)
}

static String getCommit(String branch) {
    try {
        ProcessBuilder builder = new ProcessBuilder("git", "rev-parse", branch)
        def process = builder.start()
        process.waitFor(1L, TimeUnit.SECONDS)
        def reader = new BufferedReader(new InputStreamReader(process.getInputStream()))
        def commit = reader.readLine()
        reader.close()
        return commit ?: ""
    } catch (IOException ignored) {
        if (!isInCI())
            println("Caught $ignored")
        return ""
    }
}

String getChangeLog() {
    def header = ("""\
        For Minecraft 1.17.1 and Minecraft Forge
        Released at ${ZonedDateTime.now(ZoneId.of('Asia/Tokyo')).withNano(0).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)}

        This mod requires [Scalable Cat's Force](https://www.curseforge.com/minecraft/mc-mods/scalable-cats-force)
        """ as String).stripIndent()
    def f = file("temp_changelog.md")
    if (f.exists()) {
        def version = f.readLines().find { s -> s.startsWith("#") }
        return header + System.lineSeparator() + Stream.concat(
                Stream.of(version, ""),
                f.readLines()
                        .drop(4 - 2)
                        .takeWhile { s -> !s.isEmpty() }
                        .stream()
        ).collect(Collectors.joining(System.lineSeparator()))
    } else return header
}

task CheckCompileOption() {
    setDescription("Verify the compile option.")
    doLast {
        System.out.println("Changelog for GitHub")
        System.out.println("-" * 30)
        System.out.println(getChangeLog())
        System.out.println("-" * 30)
        System.out.println("Git commit")
        System.out.println(getCommit("1.17"))
        System.out.println("-" * 30)
    }
}

task copyToDrive(type: Copy, dependsOn: "build") {
    description = "Copy jar files to directory specified in environmental value of `drive_path`"
    def PATH_NAME = "drive_path"
    from(jar.getArchiveFile(), deobfJar.getArchiveFile(), srcJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Kotori316/QuarryPlus")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                password = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN")
            }
        }
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = "AdditionalEnchantedMiner".toLowerCase()
            artifact srcJar {
                getArchiveClassifier().set('sources')
                getArchiveExtension().set('jar')
            }
            artifact deobfJar {
                getArchiveClassifier().set('deobf')
                getArchiveExtension().set('jar')
            }
            artifact jar
        }
    }
}

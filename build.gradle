import com.kotori316.plugin.cf.CallVersionCheckFunctionTask
import com.kotori316.plugin.cf.CallVersionFunctionTask

import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.util.concurrent.TimeUnit
import java.util.stream.Collectors

plugins {
    // id("scala")
    id("idea")
    id("maven-publish")
    id("signing")
    // https://maven.fabricmc.net/net/fabricmc/fabric-loom/
    id("fabric-loom") version "1.5-SNAPSHOT"
    //noinspection SpellCheckingInspection
    id "com.github.breadmoirai.github-release" version "2.2.12"
    //noinspection SpellCheckingInspection
    id "com.matthewprenger.cursegradle" version "1.4.0"
    id "com.modrinth.minotaur" version "2.+"
    id("com.kotori316.plugin.cf") version("2.3")
}

archivesBaseName = "AdditionalEnchantedMiner-${project.minecraft_version}-fabric"
version = project.mod_version
if (isInCI()) {
    String postFix = System.getenv("GITHUB_RUN_NUMBER") ?: "SNAPSHOT"
    // In remote CI/CD environment
    version = (version + "." + postFix)

    println("Set version to $version because I'm in CI.")
    println("CURSE_TOKEN: ${System.getenv().containsKey('CURSE_TOKEN')}")
    println("MODRINTH_TOKEN: ${System.getenv().containsKey('MODRINTH_TOKEN')}")
} else {
    version = (version + ".0")
}

group = "com.kotori316"

loom {
    runs {
        client {
            configName = "Client"
            runDir = Boolean.parseBoolean(System.getenv("FABRIC_SERVER")) ? "run-server" : "run"
            programArgs(List.of("--username", "Kotori"))
        }
        server {
            configName = "Server"
            runDir = "run-server"
        }
        data {
            client()
            configName = "Data"
            runDir = "run-server"
            //noinspection SpellCheckingInspection
            property("fabric-api.datagen")
            //noinspection SpellCheckingInspection
            property("fabric-api.datagen.output-dir", "${file("src/generated/resources")}")
            //noinspection SpellCheckingInspection
            property("fabric-api.datagen.strict-validation")

            ideConfigGenerated = true
            source sourceSets.test
        }
        gameTest {
            name "GameTest"
            server()
            vmArg "-ea"
            //noinspection SpellCheckingInspection
            property("fabric-api.gametest")
            //noinspection SpellCheckingInspection
            property("fabric-api.gametest.report-file", "${project.buildDir}/test-results/test/game_test.xml")
            runDir = "build/game_test"
            source sourceSets.test
        }
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/generated/resources'
        }
    }
}

repositories {
    maven {
        name = "BuildCraft"
        url = "https://alexiil.uk/maven/"
        content {
            //noinspection SpellCheckingInspection
            it.includeGroup("alexiil.mc.lib")
            //noinspection SpellCheckingInspection
            it.includeGroup("alexiil.mc.mod")
        }
    }
    maven {
        name = "REI-Architectury"
        url = "https://maven.shedaniel.me/"
    }
    maven {
        name = "ModMenu"
        url = "https://maven.terraformersmc.com/releases/"
        content {
            //noinspection SpellCheckingInspection
            it.includeModule("com.terraformersmc", "modmenu")
        }
    }
    maven {
        name = "What The Hell Is That"
        url = "https://maven.bai.lol"
        content {
            it.includeVersion("mcp.mobius.waila", "wthit-api", "fabric-${project.wthit_version}")
            it.includeVersion("mcp.mobius.waila", "wthit", "fabric-${project.wthit_version}")
            it.includeVersion("lol.bai", "badpackets", "fabric-${project.badpackets_version}")
        }
    }
    maven {
        name = "ModMaven" // Here as fallback.
        url = "https://modmaven.dev/"
    }
    maven { url = "https://maven.kyrptonaught.dev" }
    maven {
        name = "Curse Maven"
        url = "https://www.cursemaven.com"
        content {
            it.includeGroup("curse.maven")
        }
    }
    maven {
        name = "Kotori316 Maven"
        url = 'https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1'
        content {
            includeVersion("com.kotori316", "scalable-cats-force-fabric", project.kotori_scala_version)
        }
    }
    maven { url = uri("https://maven.kotori316.com") }
    repositories.stream()
            .filter { repo -> repo instanceof MavenArtifactRepository && !repo.getUrl().getScheme().contains("file") }
            .forEach { repo ->
                repo.content {
                    excludeVersionByRegex("net_fabricmc_yarn.*", ".*", ".*")
                    excludeVersionByRegex(".*", ".*", ".*mapped.*")
                }
            }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings loom.officialMojangMappings()
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    modRuntimeOnly(group: "com.kotori316", name: "scalable-cats-force-fabric", version: project.kotori_scala_version) {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "net.fabricmc")
        exclude(group: "org.typelevel")
    }

    // library
    implementation "com.google.code.findbugs:jsr305:3.0.1"
    modImplementation("com.kotori316:VersionCheckerMod:${project.property("automatic_potato_version")}") {
        transitive = false
    }

    modCompileOnly("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "net.fabricmc")
    }
    modImplementation("teamreborn:energy:${project.tech_energy_version}")
    modCompileOnly("mcp.mobius.waila:wthit-api:fabric-${project.wthit_version}")
    if (System.getenv("CI")) {
        // In CI, modCompileOnly
        modCompileOnly("RebornCore:RebornCore-1.20:${project.RebornCore_version}") {
            transitive = false
        }
        modCompileOnly("TechReborn:TechReborn-1.20:${project.TechReborn_version}") {
            transitive = false
        }
        modCompileOnly(group: "curse.maven", name: "jade-324717", version: project.jade_id)
    } else {
        // In development env, modImplementation or modRuntimeOnly
        modImplementation("RebornCore:RebornCore-1.20:${project.RebornCore_version}") {
            transitive = false
        }
        modImplementation("TechReborn:TechReborn-1.20:${project.TechReborn_version}") {
            transitive = false
        }
        modRuntimeOnly("mcp.mobius.waila:wthit:fabric-${project.wthit_version}")
        modRuntimeOnly(group: "lol.bai", name: "badpackets", version: "fabric-${project.badpackets_version}")
        modImplementation(group: "curse.maven", name: "jade-324717", version: project.jade_id)
    }

    modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_version}") {
        exclude(group: "net.fabricmc.fabric-api")
        exclude(group: "net.fabricmc")
    }
    modApi("com.terraformersmc:modmenu:${project.mod_menu_version}") {
        transitive = false
    }

    // Runtime Checks
    // if (!System.getenv("RUN_GAME_TEST")) modRuntimeOnly("alexiil.mc.mod:simplepipes-all:${project.simple_pipe_version}")
    // modRuntimeOnly("curse.maven:carpet-349239:3725895")
    // modRuntimeOnly("curse.maven:mining-dimensions-fabric-442921:3566587")
    // noinspection SpellCheckingInspection
    // modRuntimeOnly("net.kyrptonaught:customportalapi:0.0.1-beta47-1.18")

    // Test Dependencies.
    testImplementation(group: 'net.fabricmc', name: 'fabric-loader-junit', version: project.loader_version)
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.2')
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.6.2')
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.2')
    testImplementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.6.2')
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand(
                "version": project.version,
                "update_url": "https://version.kotori316.com/get-version/${project.property("minecraft_version")}/fabric/quarryplus",
        )
    }
}

@SuppressWarnings("SpellCheckingInspection")
private static boolean isInCI() {
    return Boolean.parseBoolean(System.getenv("GITHUB_ACTIONS")) || Boolean.parseBoolean(System.getenv("CI")) ||
            (!System.getProperty("os.name").toLowerCase(Locale.ROOT).startsWith("windows") && Files.exists(Paths.get("/", ".dockerenv")))
}
// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile).configureEach {
    options.encoding = "UTF-8"
    options.release.set(17)
}

sourceSets {
    main {
        java {
            srcDir 'src/main/scala'
        }
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
    toolchain {
        it.languageVersion = JavaLanguageVersion.of(17)
    }
}

static def BRANCH() { return "1.20-fabric" }

jar {
    from "LICENSE"
    def timeFormat = DateTimeFormatter.ISO_INSTANT
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": ZonedDateTime.now().format(timeFormat),
                "Commit"                  : getCommit(BRANCH())
        ])
    }
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

sourcesJar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

// PUBLISH
String joinedLog() {
    def commit = getCommit(BRANCH())
    return String.join("\n",
            "# Additional Enchanted Miner for ${project.minecraft_version} with Fabric.",
            "",
            isInCI() ? "RELEASED VIA Ci/CD. It may contain bugs." : "Manually built.",
            "",
            "## Commit",
            "",
            "[$commit](https://github.com/Kotori316/QuarryPlus/tree/$commit)",
            "",
            "## Requires",
            "",
            "* [Fabric API](https://www.curseforge.com/minecraft/mc-mods/fabric-api)",
            "* [Scalable Cat's Force](https://www.curseforge.com/minecraft/mc-mods/scalable-cats-force)",
            "* [Cloth Config API (Fabric)](https://www.curseforge.com/minecraft/mc-mods/cloth-config)",
            "",
            "## Built with",
            "",
            "* Minecraft ${project.minecraft_version}",
            "* Mapping Official",
            "* Fabric API ${project.fabric_version}",
            "* Fabric Loader ${project.loader_version}",
            // "* Lib Block Attributes ${project.bc_attribute_version}",
            // "* TechReborn Energy ${project.tech_energy_version}",
            // "* TechReborn ${project.TechReborn_version}",
            "* Cloth ${project.cloth_version}",
            "* Mod Menu ${project.mod_menu_version}",
            "* WTHIT ${project.wthit_version}",
    )
}

String curseChangelog() {
    String fromFile = file("changelog.md").exists() ? file("changelog.md").getText() : ""
    String base = joinedLog()
    String last = "See https://github.com/Kotori316/QuarryPlus/commits/${BRANCH()} to get all change log."
    return base + System.lineSeparator() * 2 +
            "# Changelog" + System.lineSeparator() + fromFile + System.lineSeparator() +
            last
}

String modrinthChangelog() {
    String base = joinedLog().lines()
            .filter { s -> !s.contains("Fabric Language Scala") }
            .collect(Collectors.joining(System.lineSeparator()))
            .replace("https://www.curseforge.com/minecraft/mc-mods/", "https://modrinth.com/mod/")
    String fromFile = (file("changelog.md").exists() ? file("changelog.md").getText() : "")
            .lines()
            .dropWhile { String s -> s.startsWith("## ") }
            .takeWhile { String s -> !s.startsWith("## ") }
            .collect(Collectors.joining(System.lineSeparator()))
    String last = "See https://github.com/Kotori316/QuarryPlus/commits/${BRANCH()} to get all change log."

    return base + System.lineSeparator() * 2 +
            "# Changelog" + System.lineSeparator() + fromFile + System.lineSeparator() +
            last
}

boolean inReleaseDebug = Boolean.parseBoolean(System.getenv("RELEASE_DEBUG"))

curseforge {
    apiKey = project.findProperty("curseforge_additional-enchanted-miner_key") ?: System.getenv("CURSE_TOKEN") ?: ""
    project {
        id = '282837'
        changelogType = 'markdown'
        addGameVersion 'Fabric'
        addGameVersion project.minecraft_version
        changelog = curseChangelog()
        releaseType = isInCI() ? 'alpha' : 'beta'
        mainArtifact(remapJar) {
            displayName = "v" + project.version + "-fabric" + " [${project.minecraft_version}]"
        }
        relations {
            requiredDependency 'scalable-cats-force'
            requiredDependency 'fabric-api'
            requiredDependency 'cloth-config'
            requiredDependency 'automatic-potato'
            //noinspection SpellCheckingInspection
            // requiredDependency 'libblockattributes'
        }
    }
    options {
        curseGradleOptions.debug = inReleaseDebug // defaults to false
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}

githubRelease {
    repo.set('QuarryPlus')
    token = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN") ?: ""
    targetCommitish.set(BRANCH())
    prerelease.set(project.version.toString().contains("SNAPSHOT"))

    body.set(joinedLog())
    releaseAssets = fileTree("build/libs")
}

modrinth {
    token.set((project.findProperty("modrinthToken") ?: System.getenv("MODRINTH_TOKEN") ?: "") as String)
    projectId.set("additional-enchanted-miner")
    versionType.set(isInCI() ? "alpha" : "release")
    versionName.set("${project.version}-fabric")
    uploadFile.set(tasks.remapJar)
    additionalFiles.set([])
    gameVersions.set([project.minecraft_version])
    loaders.set(["fabric"])
    changelog.set(modrinthChangelog())
    debugMode.set(inReleaseDebug)
    dependencies {
        required.project("fabric-api")
        required.project("cloth-config")
        required.project("scalable-cats-force")
        required.project("automatic-potato")
    }
}

test {
    useJUnitPlatform()
}

tasks.register('removeTestWorld', Delete) {
    delete("${project.buildDir}/game_test/world")
    onlyIf {
        file("${project.buildDir}/game_test/world").exists() || !file("${project.buildDir}/test-results/test").exists()
    }
    doLast {
        mkdir("${project.buildDir}/test-results/test")
    }
}
runGameTest.dependsOn(removeTestWorld)

static String getCommit(String branch) {
    try {
        ProcessBuilder builder = new ProcessBuilder("git", "rev-parse", branch)
        def process = builder.start()
        process.waitFor(1L, TimeUnit.SECONDS)
        def reader = new BufferedReader(new InputStreamReader(process.getInputStream()))
        def commit = reader.readLine()
        reader.close()
        return commit ?: ""
    } catch (IOException ignored) {
        if (!isInCI())
            println("Caught $ignored")
        return ""
    }
}

tasks.register('checkCompileOption') {
    doLast {
        List<String> strings = new ArrayList<>()
        strings.add("archivesBaseName: $archivesBaseName")
        strings.add("group: $group")
        strings.add("BRANCH: ${BRANCH()}")
        strings.add("Is in CI: " + isInCI())
        strings.add("project.group: ${project.group}")
        strings.add("version: $version")
        strings.add("Display name: ${"v" + project.version + "-fabric" + " [${project.minecraft_version}]"}")
        strings.add("runs: ${loom.getRunConfigs().asMap.toMapString()}")
        strings.add("Absolute Client RunDir: ${project.projectDir.toPath().resolve(loom.getRunConfigs().getByName("client").runDir).toAbsolutePath()}")
        strings.add("Absolute Server RunDir: ${project.projectDir.toPath().resolve(loom.getRunConfigs().getByName("server").runDir).toAbsolutePath()}")
        strings.add("-" * 20)
        strings.add("Jar: ${jar.getArchiveFile().get()}")
        strings.add("Remap Jar ${remapJar.getArchiveFile().get()}")
        strings.add("Source Jar ${sourcesJar.getArchiveFile().get()}")
        strings.add("RemapSource Jar ${remapSourcesJar.getArchiveFile().get()}")
        strings.add(String.valueOf(fileTree("build/libs").getFiles()))
        strings.add("-" * 20)
        strings.add("Now: " + ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT))
        strings.add("Now in Japan: " + ZonedDateTime.now().withZoneSameInstant(ZoneId.of("Asia/Tokyo")).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME))
        strings.add("-" * 20)
        strings.add("Repositories")
        for (def r : project.getRepositories()) {
            strings.add("${r.name} $r ${r instanceof MavenArtifactRepository ? r.getUrl() : "Not maven " + r.getClass()}")
        }

        println(strings.stream().collect(Collectors.joining(System.lineSeparator())))
        println("*" * 20)
        println("Curse ChangeLog")
        println(curseChangelog())
        println("*" * 20)
        println("Modrinth ChangeLog")
        println(modrinthChangelog())
    }
}

tasks.register('copyToDrive', Copy) {
    dependsOn("build")
    def PATH_NAME = "drive_path"
    from(remapJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}

publishing {
    repositories {
        if (!inReleaseDebug) {
            maven {
                name = "AzureRepository"
                url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
                credentials {
                    username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                    password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
                }
            }
        }
    }
    publications {
        create("mavenJava", MavenPublication) {
            artifactId = "AdditionalEnchantedMiner-Fabric".toLowerCase(Locale.ROOT)
            if (isInCI()) {
                // Set as SNAPSHOT
                version = project.snapshot_version + "-SNAPSHOT"
            } else {
                version = project.mod_version
            }
            from components.java
            pom {
                name.set("archivesBaseName")
                description.set("QuarryPlus for Minecraft ${project.minecraft_version}, build with Fabric ${project.fabric_version}")
                url.set('https://github.com/Kotori316/QuarryPlus/commits/' + BRANCH())
                packaging = "jar"
                withXml {
                    List<String> requiredArtifacts = ["cloth", "fabric-language-scala"]
                    def pomNode = asNode() as Node
                    pomNode.dependencies.'*'.findAll() { Node node ->
                        def valueList = node.value() as NodeList
                        String artifactId = ((valueList.get(1) as Node).value() as NodeList).get(0)
                        if (requiredArtifacts.stream().noneMatch { artifactId.contains(it) })
                            node.parent().remove(node)
                    }
                }
            }
        }
    }
}

remapJar.finalizedBy("jksSignJar")

tasks.register("jksSignJar") {
    dependsOn("remapJar")
    boolean executeCondition = project.hasProperty("jarSign.keyAlias") &&
            project.hasProperty("jarSign.keyLocation") &&
            project.hasProperty("jarSign.storePass")
    onlyIf { executeCondition }
    doLast {
        //noinspection HttpUrlsUsage
        ant.signjar(
                jar: remapJar.archiveFile.get(),
                alias: project.findProperty("jarSign.keyAlias") ?: "",
                keystore: project.findProperty("jarSign.keyLocation") ?: "",
                storepass: project.findProperty("jarSign.storePass") ?: "",
                sigalg: "Ed25519",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com",
        )
    }
}

signing {
    sign(publishing.publications)
    sign(tasks.jar, tasks.remapJar, tasks.sourcesJar)
}

boolean hasGpgSignature = project.hasProperty("signing.keyId") &&
        project.hasProperty("signing.password") &&
        project.hasProperty("signing.secretKeyRingFile")

tasks.withType(Sign).configureEach {
    it.onlyIf {
        hasGpgSignature
    }
}

tasks.withType(AbstractPublishToMaven).configureEach {
    if (hasGpgSignature) {
        it.dependsOn(":signRemapJar")
    }
}

tasks.register("registerVersion", CallVersionFunctionTask.class) {
    functionEndpoint = readVersionFunctionEndpoint(project)
    gameVersion = project.property("minecraft_version").toString()
    platform = "fabric"
    platformVersion = project.property("fabric_version").toString()
    modName = "quarryplus"
    changelog = "Version ${project.version}"
    homepage = "https://modrinth.com/mod/additional-enchanted-miner"
    isDryRun = false
}
tasks.register("checkReleaseVersion", CallVersionCheckFunctionTask.class) {
    gameVersion = project.property("minecraft_version").toString()
    platform = "fabric"
    modName = "quarryplus"
    version = project.version.toString()
    failIfExists = true
}

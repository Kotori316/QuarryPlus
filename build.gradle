import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.util.concurrent.TimeUnit
import java.util.stream.Collectors

buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        maven { url = "https://plugins.gradle.org/m2/" }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.4.0"
    }
}
plugins {
    id("maven-publish")
    id "com.wynprice.cursemaven" version "2.1.1"
    id "com.github.breadmoirai.github-release" version "2.2.12"
}
apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle'
apply plugin: "com.matthewprenger.cursegradle"
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'eclipse'

version = getProperty("modVersion")
if (isInCI()) {
    String postFix
    String sha = System.getenv("GITHUB_SHA")
    if (sha == null) {
        postFix = ""
    } else {
        postFix = sha.substring(0, 7)
    }
    // In remote CI/CD environment
    version = (getProperty("modVersion") + "_" + postFix)
}
group = 'com.kotori316' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'AdditionalEnchantedMiner-1.16.2'

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.
compileScala.sourceCompatibility = compileScala.targetCompatibility = '1.8'
compileScala.options.compilerArgs.add("-Xlint:all")

static String mappingVersion() { return '20200723-1.16.1' }

println('Java: ' + System.getProperty('java.version') + ' JVM: ' + System.getProperty('java.vm.version') + '(' + System.getProperty('java.vendor') + ') Arch: ' + System.getProperty('os.arch'))

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    mappings channel: 'snapshot', version: mappingVersion()
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.

    // accessTransformer = file('build/resources/main/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('Minecraft')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'REGISTRIES'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'

            mods {
                quarryplus {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'

            mods {
                quarryplus {
                    source sourceSets.main
                }
            }
        }
        data {
            workingDirectory project.file('run-server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property 'forge.logging.console.level', 'info'
            forceExit false

            if (isInCI())
                args '--mod', "quarryplus", '--dev'
            else
                args '--mod', "quarryplus", '--all'

            mods {
                quarryplus {
                    source sourceSets.main
                }
            }
        }
    }
}
repositories {
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
        content {
            includeGroup("mezz.jei")
        }
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven-k-4u.nl"
        url = "https://modmaven.k-4u.nl"
    }
    if (isInCI()) {
        maven {
            name = "Scala Language Loader"
            url = uri("https://maven.pkg.github.com/Kotori316/SLP")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                password = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN")
            }
            content {
                includeModule("com.kotori316", "ScalableCatsForce")
            }
        }
    }
    repositories.stream().filter { it instanceof MavenArtifactRepository }.forEach { repo ->
        repo.content {
            excludeVersionByRegex(".*", ".*", ".*_mapped_snapshot_.*")
        }
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    def forge_prop = loadProperties("forge_version.properties")
    minecraft(forge_prop.getProperty("forge_version"))
    implementation group: 'org.scala-lang', name: 'scala-library', version: '2.13.3'
    implementation group: 'org.typelevel', name: "cats-core_2.13", version: '2.2.0'

    // at runtime, use the full JEI jar
    implementation fg.deobf("mezz.jei:jei-1.16.2:7.1.3.19")
//    compileOnly fg.deobf("curse.maven:mekanism:2894305")

    // Test Dependencies.
    implementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.2')
    runtimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.2')
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
    implementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.6.2')

    if (isInCI()) {
        runtimeOnly("com.kotori316:ScalableCatsForce:2.13.3-build-3:dev")
    }
}

@SuppressWarnings("SpellCheckingInspection")
private static boolean isInCI() {
    return Boolean.parseBoolean(System.getenv("GITHUB_ACTIONS")) ||
            (!System.getProperty("os.name").toLowerCase().startsWith("windows") && Files.exists(Paths.get("/", ".dockerenv")))
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    def timeFormat = DateTimeFormatter.ISO_INSTANT
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": ZonedDateTime.now().format(timeFormat),
                "Commit"                  : getCommit("1.16")
        ])
    }
}

// Example configuration to allow publishing using the maven-publish task
// we define a custom artifact that is sourced from the reobfJar output task
// and then declare that to be published
// Note you'll need to add a repository here
def reobfFile = file("$buildDir/reobfJar/output.jar")
def reobfArtifact = artifacts.add('default', reobfFile) {
    type 'jar'
    builtBy 'reobfJar'
}

def loadProperties(String filename) {
    def props = new Properties()
    file(filename).withInputStream {
        props.load(it)
    }
    return props
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

def curseForgeLog() {
    def header = "Build with ${loadProperties("forge_version.properties").getProperty("forge_version")}, Mapping: ${mappingVersion()}" +
            System.lineSeparator() * 2
    def file = new File("temp_changelog.md")
    def fileText = file.exists() ? file.text : "No changelog provided."
    return header + fileText
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '282837'
        changelogType = 'markdown'
        changelog = curseForgeLog()
        releaseType = 'release'
        addGameVersion '1.16.2'
        mainArtifact(jar) {
            displayName = 'v' + project.version
        }
        addArtifact deobfJar
        addArtifact srcJar
        relations {
            requiredDependency 'scalable-cats-force'
        }
    }
    options {
        debug = false // defaults to false
        javaVersionAutoDetect = false
    }
}

githubRelease {
    repo.set('QuarryPlus')
    token = project.hasProperty("githubToken") ? getProperty("githubToken") : ""
    targetCommitish.set('1.16')
    prerelease.set(project.version.toString().contains("SNAPSHOT"))
    body.set(getChangeLog() +
            System.lineSeparator() * 2 +
            "Build with ${loadProperties("forge_version.properties").getProperty("forge_version")}, Mapping: ${mappingVersion()}")
    releaseAssets = files(
            jar.getArchiveFile().get(),
            deobfJar.getArchiveFile().get(),
            srcJar.getArchiveFile().get()
    )
}

test {
    useJUnitPlatform()
}

task signJar2() {
    doLast {
        ant.signjar(
                jar: jar.archiveFile.get(),
                alias: project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : "",
                keystore: project.hasProperty('keyStore') ? project.getProperty("keyStore") : "",
                storepass: project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : "",
                sigalg: "SHA1withRSA",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com"
        )
    }
    onlyIf {
        project.hasProperty('keyStoreAlias') &&
                project.hasProperty('keyStore') &&
                project.hasProperty('keyStorePass')
    }
}

task signJar(type: net.minecraftforge.gradle.common.task.SignJar) {
    alias = project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : ""
    keyStore = project.hasProperty('keyStore') ? project.getProperty("keyStore") : ""
    storePass = project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : ""
    keyPass = project.hasProperty("keyStoreKeyPass") ? project.getProperty('keyStoreKeyPass') : ""

    inputFile = jar.archiveFile.get()
    outputFile = jar.archiveFile.get()

    onlyIf {
        project.hasProperty('keyStoreAlias') &&
                project.hasProperty('keyStore') &&
                project.hasProperty('keyStorePass')
    }
}

if (!isInCI()) {
    // Runs this task automatically when build is ran.
    assemble.dependsOn(signJar)
//    assemble.dependsOn(signJar2)
}

static String getCommit(String branch) {
    ProcessBuilder builder = new ProcessBuilder("git", "rev-parse", branch)
    def process = builder.start()
    process.waitFor(1L, TimeUnit.SECONDS)
    def reader = new BufferedReader(new InputStreamReader(process.getInputStream()))
    def commit = reader.readLine()
    reader.close()
    return commit ?: ""
}

String getChangeLog() {
    file("temp_changelog.md").readLines()
            .drop(1)
            .takeWhile { s -> !s.isEmpty() }
            .stream().collect(Collectors.joining(System.lineSeparator()))
}

task CheckCompileOption() {
    doLast {
        def argsScala = compileScala.options.compilerArgs
        println("Arg of compileScala" + System.lineSeparator() + "-" * 15)
        println(argsScala)
        println(argsScala.getClass())
//        System.properties.list(System.out)
        println(System.lineSeparator() + "CI" + System.lineSeparator() + "-" * 15)
        println("Is in CI: " + isInCI())
        println("Now: " + ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT))
        println("Now in Japan: " + ZonedDateTime.now().withZoneSameInstant(ZoneId.of("Asia/Tokyo")).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME))
        println(System.lineSeparator() + "Change log" + System.lineSeparator() + "-" * 15)
        println(getChangeLog())
        println(System.lineSeparator() + "Saved file" + System.lineSeparator() + "-" * 15)
        println(jar.archiveFile.get())
        println(srcJar.archiveFile.get())
        println(deobfJar.archiveFile.get())
        println(System.lineSeparator() + "Repository" + System.lineSeparator() + "-" * 15)
        getProject().getRepositories().stream().forEach { n -> println("${n.name} $n ${n instanceof MavenArtifactRepository ? n.getUrl() : "Not maven " + n.getClass()}") }
        println(System.lineSeparator() + "Repository Classes" + System.lineSeparator() + "-" * 15)
        getProject().getRepositories().stream().map { it.getClass() }.distinct().forEach { printTree(it, 0) }
        println(System.lineSeparator() + "Dependency" + System.lineSeparator() + "-" * 15)
        getProject().getConfigurations().each { config ->
            println(config.getName())
            config.getAllDependencies().each { println(it) }
        }
    }
}

private static void printTree(Class<?> clazz, int depth) {
    print(" |" * depth + "-")
    if (clazz == null) {
        System.out.println("NULL CLASS?")
        return
    }
    String pre = clazz.isInterface() ? "INTERFACE " : "CLASS "
    System.out.println(pre + clazz.name)
    if (clazz.superclass != null)
        printTree(clazz.superclass, depth + 1)
    clazz.interfaces.each { printTree(it, depth + 1) }
}

task copyToDrive(type: Copy, dependsOn: "build") {
    def PATH_NAME = "drive_path"
    from(jar.getArchiveFile(), deobfJar.getArchiveFile(), srcJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Kotori316/QuarryPlus")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                password = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN")
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = "AdditionalEnchantedMiner"
            artifact srcJar {
                classifier = 'sources'
                extension = 'jar'
            }
            artifact deobfJar {
                classifier = 'deobf'
                extension = 'jar'
            }
            artifact reobfArtifact
        }
    }
}

buildscript {
    repositories {
        jcenter()
        maven { url = "http://files.minecraftforge.net/maven" }
        maven { url = "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:2.3-SNAPSHOT'
        classpath "gradle.plugin.com.matthewprenger:CurseGradle:1.0.10"
    }
}
apply plugin: 'scala'
apply plugin: 'net.minecraftforge.gradle.forge'
apply plugin: "com.matthewprenger.cursegradle"
//Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.


version = getProperty("modversion")
group = "com.yogpc.qp" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "AdditionalEnchantedMiner-1.12.2"

sourceCompatibility = targetCompatibility = "1.8" // Need this here so eclipse task generates correctly.
compileScala {
    sourceCompatibility = targetCompatibility = "1.8"
    compileScala.options.compilerArgs = ['-Xlint:all']
    scalaCompileOptions.additionalParameters = ["-feature"/*, "-target:jvm-1.8", "-Ybackend:GenBCode", "-Ydelambdafy:method"*/]
}

minecraft {
    version = "1.12.2-14.23.4.2746"
    runDir = "run"

    // the mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   snapshot are built nightly.
    // stable_#            stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // simply re-run your setup task after changing the mappings to update your workspace.
    mappings = "snapshot_20171003"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    replace "\${version}", project.version
    replace '@FINGERPRINT@', project.hasProperty('signSHA1') ? project.getProperty('signSHA1') : ""
}

repositories {
    maven {
        name 'curseforge'
        url 'https://minecraft.curseforge.com/api/maven/'
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    maven {
        name = "CoFH Maven"
        url = "http://maven.covers1624.net"
    }
    maven {
        name "BuildCraft"
        url = "https://mod-buildcraft.com/maven"
    }
    maven {
        name = "ic2"
        url = "http://maven.ic2.player.to/"
    }
    maven {
        name = "Mekanism"
        url = "http://maven.thiakil.com/"
    }
    maven {
        name 'Crafttweaker'
        url 'http://maven.blamejared.com/'
    }
    maven {
        name 'CTM'
        url 'http://maven.tterrag.com/'
    }
}

dependencies {
//    compile 'org.scala-lang:scala-library:2.11.11'
//    compile group: "com.github.bigwheel", name: "util-backports_2.12", version: "1.1"
    deobfCompile 'net.industrial-craft:industrialcraft-2:2.8.75-ex112:dev'
    deobfCompile "cofh:RedstoneFlux:1.12-2.0.2.4:universal"
    deobfCompile "cofh:CoFHCore:1.12.2-4.5.3.20:universal"
    deobfCompile "mezz.jei:jei_1.12.2:4.8.0.119"
    deobfCompile "com.mod-buildcraft:buildcraft:7.99.17"
    deobfCompile "mekanism:Mekanism:1.12.2-9.4.4.330+0b21085"
    deobfCompile "team.chisel.ctm:CTM:MC1.12-0.2.3.13"
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", project.version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': project.version, 'mcversion': project.minecraft.version
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    classifier = 'universal'
    from sourceSets.main.output
    exclude("*.md")
}

task signJar(type: SignJar, dependsOn: reobfJar) {

    // Skips if the keyStore property is missing.
    onlyIf {
        project.hasProperty('keyStore')
    }

    // findProperty allows us to reference the property without it existing.
    // Using project.propName would cause the script to fail validation if
    // the property did not exist.
    keyStore = project.hasProperty('keyStore') ? project.getProperty("keyStore") : ""
    alias = project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : ""
    storePass = project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : ""
    keyPass = project.hasProperty('keyStoreKeyPass') ? project.getProperty('keyStoreKeyPass') : ""
    inputFile = jar.archivePath
    outputFile = jar.archivePath
}
// Runs this task automatically when build is ran.
build.dependsOn signJar


task srcJar(type: Jar) {
    from sourceSets.main.allSource
    classifier = 'sources'
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    classifier = 'deobf'
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '282837'
        changelog = 'See GitHub commit'
        releaseType = 'release'
        mainArtifact jar
    }
}

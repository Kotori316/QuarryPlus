import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.util.concurrent.TimeUnit
import java.util.stream.Collectors
import java.util.stream.Stream

buildscript {
    repositories {
        mavenCentral()
    }
}
plugins {
    id("maven-publish")
    id("scala")
    id("net.minecraftforge.gradle") version("[6.0,6.2)")
    id("org.parchmentmc.librarian.forgegradle") version("1.+")
    id("com.github.breadmoirai.github-release") version("2.4.1")
    id("com.matthewprenger.cursegradle") version("1.4.0")
    id("com.modrinth.minotaur").version("2.+")
}
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

String createVersion() {
    String mcVersion = "%-4s".formatted(project.minecraftVersion.replace(".", "")).replace(' ', '0')
    String major = project.modVersionMajor
    String minor = System.getenv("GITHUB_RUN_NUMBER") ?: project.modVersionMinor ?: "0-SNAPSHOT"
    return "$mcVersion.$major.$minor"
}

version = createVersion()
group = "com.kotori316" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "AdditionalEnchantedMiner-" + project.minecraftVersion

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

compileScala {
    scalaCompileOptions.additionalParameters = ["-Wconf:cat=deprecation:w,any:e"]
}

@SuppressWarnings("SpellCheckingInspection")
private static boolean isInCI() {
    return Boolean.parseBoolean(System.getenv("GITHUB_ACTIONS")) || Boolean.parseBoolean(System.getenv("CI")) ||
            (!System.getProperty("os.name").toLowerCase().startsWith("windows") && Files.exists(Paths.get("/", ".dockerenv")))
}

println("Java: ${System.getProperty("java.version")} " +
        "JVM: ${System.getProperty("java.vm.version")}(${System.getProperty("java.vendor")}) " +
        "Arch: ${System.getProperty("os.arch")} " +
        "Project version: ${project.version}")
minecraft {
    mappings channel: "parchment", version: ((project.parchmentMapping + "-" + project.minecraftVersion) as String)
//    mappings channel: "official", version: (project.minecraftVersion as String)

    runs {
        client {
            workingDirectory project.file("Minecraft")
            property("forge.logging.markers", "REGISTRIES")
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            property("mixin.debug.export", "true")
            property("forge.logging.console.level", "debug")
            property("forge.enabledGameTestNamespaces", "QuarryPlus".toLowerCase())
            // From https://github.com/SlimeKnights/TinkersConstruct/blob/1.18/build.gradle
            if (project.hasProperty("mc_uuid")) {
                // Your uuid without any dashes in the middle
                args("--uuid", project.getProperty("mc_uuid"))
            }
            if (project.hasProperty("mc_username")) {
                // Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args("--username", project.getProperty("mc_username"))
            }
            // Your access token, you can find it in your ".minecraft/launcher_profiles.json" file
            // If not set, use "0" to prevent authentication exception.
            args("--accessToken", project.findProperty("mc_token") ?: "0")
            jvmArgs("-EnableAssertions".toLowerCase())

            mods {
                quarryplus {
                    source(sourceSets.main)
                    source(sourceSets.test)
                }
            }
            lazyToken("minecraft_classpath") {
                configurations.game_test.collect { it.absolutePath }.join(File.pathSeparator)
            }
        }

        client2 {
            parent(runs.client)
            workingDirectory project.file("run-server-client")
            property("forge.logging.markers", "REGISTRIES")
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            property("mixin.debug.export", "true")
            property("forge.logging.console.level", "info")
            property("forge.enabledGameTestNamespaces", "")
            property("forge.enableGameTest", "false")
            mods {
                quarryplus {
                    source(sourceSets.main)
                }
            }
        }

        server {
            workingDirectory project.file("run-server")

            // Recommended logging data for a userdev environment
            property("forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP")
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            property("mixin.debug.export", "true")
            property("forge.logging.console.level", "info")
            args("--nogui")

            mods {
                quarryplus {
                    source(sourceSets.main)
                }
            }
        }

        data {
            workingDirectory project.file("run-server")
            property("forge.logging.markers", "SCAN,REGISTRIES,REGISTRYDUMP")
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            property("mixin.debug.export", "true")
            property("forge.logging.console.level", "info")
            args("--mod", "quarryplus", "--all", "--output", file("src/generated/resources/"), "--existing", file("src/main/resources/"))

            mods {
                quarryplus {
                    source(sourceSets.main)
                    source(sourceSets.test)
                }
            }
        }

        gameTestServer {
            workingDirectory project.file("game-test")
            property("forge.logging.markers", "REGISTRIES")
            property("mixin.env.remapRefMap", "true")
            property("mixin.env.refMapRemappingFile", "${projectDir}/build/createSrgToMcp/output.srg")
            property("mixin.debug.export", "true")
            property("forge.logging.console.level", "debug")
            property("forge.enabledGameTestNamespaces", "QuarryPlus".toLowerCase())
            jvmArgs("-EnableAssertions".toLowerCase())

            mods {
                quarryplus {
                    source(sourceSets.main)
                    source(sourceSets.test)
                }
            }
            lazyToken("minecraft_classpath") {
                configurations.game_test.collect { it.absolutePath }.join(File.pathSeparator)
            }
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
    /*maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven-k-4u.nl"
        url = "https://modmaven.dev/"
    }*/
    maven {
        name = "CraftTweaker"
        url = "https://maven.blamejared.com"
        content {
            //noinspection SpellCheckingInspection
            includeModule("com.blamejared.crafttweaker", "CraftTweaker-1.16.4")
            includeGroup("mezz.jei")
        }
    }

    maven {
        name = "FTB NEW"
        url = "https://maven.saps.dev/releases/"
        content {
            includeGroup("dev.ftb.mods")
            includeGroup("dev.latvian.mods")
        }
    }

    maven {
        name = "architectury"
        url = uri("https://maven.architectury.dev/")
        content {
            it.includeGroup("dev.architectury")
            it.includeVersion("me.shedaniel", "RoughlyEnoughItems-forge", project.reiVersion)
            it.includeModule("me.shedaniel.cloth", "cloth-config-forge")
        }
    }

    maven {
        name = "Azure-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            it.includeVersion("com.kotori316", "ScalableCatsForce".toLowerCase(), project.slpVersion as String)
            it.includeVersion("com.kotori316", "test_utility", project.testUtilVersion as String)
            it.includeVersion("com.kotori316", "test_utility_dependency", "2.0-SNAPSHOT")
            it.includeVersion("org.typelevel", "cats-core_3", project.catsVersion as String)
            it.includeVersion("org.typelevel", "cats-kernel_3", project.catsVersion as String)
        }
    }
    maven {
        url = "https://www.cursemaven.com"
        content {
            it.includeGroup("curse.maven")
        }
    }
    mavenLocal()
}

configurations {
    game_test
}

dependencies {
    String forgeVersion = System.getenv("CI_FORGE") ?: project.forgeVersion
    minecraft("net.minecraftforge:forge:" + forgeVersion)
    System.out.println(("Selected version: " + "net.minecraftforge:forge:" + forgeVersion) as String)
    compileOnly(group: "org.scala-lang", name: "scala-library", version: project.scalaVersion)
    compileOnly(group: "org.typelevel", name: "cats-core_3", version: project.catsVersion) {
        exclude(group: 'org.scala-lang', module: 'scala3-library_3')
    }
    testImplementation(group: "org.scala-lang", name: "scala-library", version: project.scalaVersion)
    testImplementation(group: "org.typelevel", name: "cats-core_3", version: project.catsVersion) {
        exclude(group: 'org.scala-lang', module: 'scala3-library_3')
    }

    boolean useREI = true // Boolean.parseBoolean(System.getenv("USE_REI"))
    compileOnly(fg.deobf(group: "mezz.jei", name: "jei-1.19.2-common-api", version: project.jeiVersion))
    compileOnly(fg.deobf(group: "mezz.jei", name: "jei-1.19.2-forge-api", version: project.jeiVersion))
    if (useREI) {
        compileOnly(fg.deobf(group: "me.shedaniel", name: "RoughlyEnoughItems-forge", version: project.reiVersion))
        implementation(fg.deobf(group: "me.shedaniel.cloth", name: "cloth-config-forge", version: project.clothVersion))
        implementation(fg.deobf(group: "dev.architectury", name: "architectury-forge", version: project.architecturyVersion))
    } else {
        runtimeOnly(fg.deobf(group: "mezz.jei", name: "jei-1.19.2-forge", version: project.jeiVersion) {
            transitive(false)
        })
        compileOnly(fg.deobf(group: "me.shedaniel", name: "RoughlyEnoughItems-forge", version: project.reiVersion))
        compileOnly(fg.deobf(group: "me.shedaniel.cloth", name: "cloth-config-forge", version: project.clothVersion))
        compileOnly(fg.deobf(group: "dev.architectury", name: "architectury-forge", version: project.architecturyVersion))
    }
    runtimeOnly(group: "com.kotori316", name: "ScalableCatsForce".toLowerCase(), version: project.slpVersion, classifier: "with-library") {
        transitive(false)
    }

    boolean enableFTB = false // Boolean.parseBoolean(System.getenv("USE_FTB"))
    if (enableFTB) { // FTB Chunks stuff
        implementation(fg.deobf(group: "dev.ftb.mods", name: "ftb-chunks-forge", version: project.ftbChunksVersion))
        implementation(fg.deobf(group: "dev.ftb.mods", name: "ftb-library-forge", version: project.ftbLibraryVersion))
        runtimeOnly(fg.deobf(group: "dev.ftb.mods", name: "ftb-teams-forge", version: project.ftbTeamsVersion))
        implementation(fg.deobf(group: "dev.architectury", name: "architectury-forge", version: project.architecturyVersion))
    } else {
        compileOnly(fg.deobf(group: "dev.ftb.mods", name: "ftb-chunks-forge", version: project.ftbChunksVersion))
        compileOnly(fg.deobf(group: "dev.ftb.mods", name: "ftb-library-forge", version: project.ftbLibraryVersion))
    }

    // IC2 Classic
    if (false) {
        // if (System.getenv("IGNORE_OTHER_MODS_IN_RUNTIME") == null) {
        compileOnly(fg.deobf(group: "curse.maven", name: "ic2-classic-242942", version: project.ic2ClassicId))
        testImplementation(fg.deobf(group: "curse.maven", name: "ic2-classic-242942", version: project.ic2ClassicId))
    } else {
        compileOnly(fg.deobf(group: "curse.maven", name: "ic2-classic-242942", version: project.ic2ClassicId))
        // testCompileOnly(fg.deobf(group: "curse.maven", name: "ic2-classic-242942", version: project.ic2ClassicId))
    }

    // Test Dependencies.
    // Required these libraries to execute the tests.
    // The library will avoid errors of ForgeRegistry and Capability.
    implementation(fg.deobf(group: "com.kotori316", name: "test_utility", version: project.testUtilVersion))
    implementation(group: "com.kotori316", name: "test_utility_dependency", version: "2.0-SNAPSHOT"){
        exclude(group: 'org.scala-lang', module: 'scala3-library_3')
    }

    game_test(group: "org.junit.jupiter", name: "junit-jupiter-api", version: project.jupiterVersion)
    game_test(group: "org.junit.jupiter", name: "junit-jupiter-params", version: project.jupiterVersion)
    game_test(group: "org.junit.jupiter", name: "junit-jupiter-engine", version: project.jupiterVersion)
    game_test(group: "org.junit.platform", name: "junit-platform-launcher", version: project.jupiterPlatformVersion)
}

// Example for how to get properties into the manifest for reading at runtime.
def jarAttributeMap = [
        "Specification-Title"     : project.name,
        "Specification-Vendor"    : "Kotori316",
        "Specification-Version"   : "1", // We are version 1 of ourselves
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : project.version,
        "Implementation-Vendor"   : "Kotori316",
        "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
        "Commit"                  : getCommit(project.branch as String),
        "Automatic-Module-Name"   : "quarryplus",
]

jar {
    manifest {
        attributes(jarAttributeMap)
    }
}

sourceSets {
    main {
        resources {
            srcDir("src/main/resources")
            srcDir("src/generated/resources")
        }
    }
}

tasks.register("srcJar", Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set("sources")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

tasks.register("deobfJar", Jar) {
    from sourceSets.main.output
    archiveClassifier.set("deobf")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(jarAttributeMap)
    }
}

// Tell the artifact system about our extra jars
artifacts {
    archives(srcJar, deobfJar)
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy("reobfJar")

jar.finalizedBy("signJar")

tasks.register("signJar") {
    dependsOn("reobfJar")
    boolean executeCondition = project.hasProperty("keyStoreAlias") &&
            project.hasProperty("keyStore") &&
            project.hasProperty("keyStorePass")
    onlyIf { executeCondition }
    doLast {
        //noinspection HttpUrlsUsage
        ant.signjar(
                jar: jar.archiveFile.get(),
                alias: project.hasProperty("keyStoreAlias") ? project.getProperty("keyStoreAlias") : "",
                keystore: project.hasProperty("keyStore") ? project.getProperty("keyStore") : "",
                storepass: project.hasProperty("keyStorePass") ? project.getProperty("keyStorePass") : "",
                sigalg: "SHA1withRSA",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com"
        )
    }
}

def changeLogHeader() {
    return ("""\
            For Minecraft ${project.minecraftVersion} and Minecraft Forge.
            Released at ${ZonedDateTime.now(ZoneId.of("Asia/Tokyo")).withNano(0).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)}

            This mod requires [Scalable Cat's Force](https://www.curseforge.com/minecraft/mc-mods/scalable-cats-force)
            Build with ${project.forgeVersion}, Mapping: parchment ${project.parchmentMapping + "-" + project.minecraftVersion}
            """ as String).stripIndent()
}

def combinedLog() {
    def header = changeLogHeader() + System.lineSeparator() * 2
    def file = new File("temp_changelog.md")
    def fileText = file.exists() ? file.text : "No changelog provided."
    return header + fileText
}

static String getCommit(String branch) {
    try {
        ProcessBuilder builder = new ProcessBuilder("git", "rev-parse", branch)
        def process = builder.start()
        process.waitFor(1L, TimeUnit.SECONDS)
        try (def stream = new InputStreamReader(process.getInputStream())
             def reader = new BufferedReader(stream)) {
            def commit = reader.readLine()
            return commit ?: ""
        }
    } catch (IOException ignored) {
        if (!isInCI())
            println("Caught $ignored")
        return ""
    }
}

String getChangeLog() {
    def header = changeLogHeader()
    def f = file("temp_changelog.md")
    if (f.exists()) {
        String version = f.readLines().find { s -> s.startsWith("#") }
        return header + System.lineSeparator() + Stream.concat(
                Stream.of(version, ""),
                f.readLines()
                        .drop(4 - 2)
                        .takeWhile { s -> !s.isEmpty() }
                        .stream() as Stream<String>
        ).collect(Collectors.joining(System.lineSeparator()))
    } else return header
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = "282837"
        changelogType = "markdown"
        changelog = combinedLog()
        releaseType = "release"
        addGameVersion(project.minecraftVersion)
        mainArtifact(jar) {
            displayName = "v" + project.version + "-forge" + " [${project.minecraftVersion}]"
        }
        addArtifact(deobfJar)
        addArtifact(srcJar)
        relations {
            requiredDependency "scalable-cats-force"
        }
    }
    options {
        curseGradleOptions.debug = false // defaults to false
        curseGradleOptions.javaVersionAutoDetect = false
    }
}

modrinth {
    token.set((project.findProperty("modrinthToken") ?: System.getenv("MODRINTH_TOKEN") ?: "") as String)
    projectId = "additional-enchanted-miner"
    versionType = "release"
    versionName = "${project.version}-forge"
    uploadFile = tasks.jar
    getAdditionalFiles().set([
            tasks.deobfJar,
            tasks.srcJar,
    ])
    getGameVersions().set([project.minecraftVersion])
    getLoaders().set(["forge"])
    changelog = combinedLog()
    debugMode = false
    dependencies {
        required.project("scalable-cats-force")
    }
}

githubRelease {
    repo.set("QuarryPlus")
    token = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN") ?: ""
    targetCommitish.set(project.branch as String)
    prerelease.set(project.version.toString().contains("SNAPSHOT"))
    body.set(getChangeLog())
    releaseAssets = files(
            jar,
            deobfJar,
            srcJar,
    )
}

test {
    useJUnitPlatform()
}

tasks.register("checkCompileOption") {
    setDescription("Verify the compile option.")
    doLast {
        System.out.println("Changelog for GitHub")
        System.out.println("-" * 30 as String)
        System.out.println(getChangeLog())
        System.out.println("-" * 30 as String)
        System.out.println("Git commit")
        System.out.println(getCommit(project.branch as String))
        System.out.println("-" * 30 as String)
    }
}

tasks.register("copyToDrive", Copy) {
    dependsOn("build")
    description = "Copy jar files to directory specified in environmental value of `drive_path`"
    def PATH_NAME = "drive_path"
    from(jar.getArchiveFile(), deobfJar.getArchiveFile(), srcJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Kotori316/QuarryPlus")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                password = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN")
            }
        }
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = "AdditionalEnchantedMiner".toLowerCase()
            artifact srcJar {
                getArchiveClassifier().set("sources")
                getArchiveExtension().set("jar")
            }
            artifact deobfJar {
                getArchiveClassifier().set("deobf")
                getArchiveExtension().set("jar")
            }
            artifact jar
            pom {
                name = archivesBaseName
                description = "QuarryPlus for Minecraft ${project.minecraftVersion} and Forge ${project.forgeVersion}"
                url = "https://github.com/Kotori316/QuarryPlus"
                packaging = "jar"
            }
        }
    }
}

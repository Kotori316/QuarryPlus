import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.util.concurrent.TimeUnit
import java.util.stream.Collectors

plugins {
    // id("scala")
    id("maven-publish")
    // https://maven.fabricmc.net/net/fabricmc/fabric-loom/
    id 'fabric-loom' version "0.9.31"
    //noinspection SpellCheckingInspection
    id "com.github.breadmoirai.github-release" version "2.2.12"
    //noinspection SpellCheckingInspection
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

archivesBaseName = "AdditionalEnchantedMiner-1.17-fabric"
version = project.mod_version
if (isInCI()) {
    String postFix = System.getenv("GITHUB_RUN_NUMBER") ?: "SNAPSHOT"
    // In remote CI/CD environment
    version = (version + "." + postFix)

    println("Set version to $version because I'm in GitHub Actions.")
    println("CURSEFORGE_KEY: ${System.getenv().containsKey('CURSEFORGE_KEY')}")
} else {
    version = (version + ".0")
}

group = "com.kotori316"

minecraft {
    runs {
        it.configure {
            client {
                runDir = Boolean.parseBoolean(System.getenv("FABRIC_SERVER") ?: "false") ? "run-server" : "run"
            }
            server {
                runDir = "run-server"
            }
        }
    }
}

repositories {
    maven {
        name = "BuildCraft"
        url = "https://alexiil.uk/maven/"
        content {
            //noinspection SpellCheckingInspection
            it.includeGroup("alexiil.mc.lib")
            //noinspection SpellCheckingInspection
            it.includeGroup("alexiil.mc.mod")
        }
    }
    maven {
        name = "REI-Architectury"
        url = "https://maven.shedaniel.me/"
    }
    maven {
        name = "ModMaven" // Here as fallback.
        url = "https://modmaven.dev/"
    }
    repositories.stream()
            .filter {repo ->  repo instanceof MavenArtifactRepository && !repo.getUrl().getScheme().contains("file") }
            .forEach { repo ->
                repo.content {
                    //noinspection SpellCheckingInspection
                    excludeVersionByRegex("net_fabricmc_yarn.*", ".*", ".*")
                    excludeVersionByRegex(".*", ".*", ".*mapped.*")
                }
            }
}

dependencies {
    //to change the versions see the gradle.properties file
    minecraft "com.mojang:minecraft:${project.minecraft_version}"
    mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
    modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

    // Fabric API. This is technically optional, but you probably want it anyway.
    modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"
    //noinspection SpellCheckingInspection
    modImplementation "net.fabricmc:fabric-language-scala:1.0.0"

    // library
    implementation "org.scala-lang:scala-library:2.13.4"
    implementation "com.google.code.findbugs:jsr305:3.0.1"
    //noinspection SpellCheckingInspection
    modImplementation "alexiil.mc.lib:libblockattributes-all:${project.bc_attribute_version}"

    //noinspection SpellCheckingInspection
    modRuntime("alexiil.mc.mod:simplepipes-all:${project.simple_pipe_version}")
    //noinspection SpellCheckingInspection
    modRuntime("me.shedaniel:RoughlyEnoughItems-fabric:${project.rei_version}")
    modImplementation("RebornCore:RebornCore-1.17:${project.RebornCore_version}")
    modRuntime("TechReborn:TechReborn-1.17:${project.TechReborn_version}")

    // PSA: Some older mods, compiled on Loom 0.2.1, might have outdated Maven POMs.
    // You may need to force-disable transitiveness on them.

    // Test Dependencies.
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.6.2')
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.6.2')
    testImplementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.6.2')
}

processResources {
    inputs.property "version", project.version

    filesMatching("fabric.mod.json") {
        expand "version": project.version
    }
}

@SuppressWarnings("SpellCheckingInspection")
private static boolean isInCI() {
    return Boolean.parseBoolean(System.getenv("GITHUB_ACTIONS")) || Boolean.parseBoolean(System.getenv("CI")) ||
            (!System.getProperty("os.name").toLowerCase().startsWith("windows") && Files.exists(Paths.get("/", ".dockerenv")))
}
// ensure that the encoding is set to UTF-8, no matter what the system default is
// this fixes some edge cases with special characters not displaying correctly
// see http://yodaconditions.net/blog/fix-for-java-file-encoding-problems-with-gradle.html
tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.release.set(16)
}

sourceSets {
    main {
        java {
            srcDir 'src/main/scala'
        }
    }
}

java {
    // Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
    // if it is present.
    // If you remove this line, sources will not be generated.
    withSourcesJar()
    toolchain {
        it.languageVersion = JavaLanguageVersion.of(16)
    }
}

jar {
    from "LICENSE"
    def timeFormat = DateTimeFormatter.ISO_INSTANT
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Kotori316",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.version,
                "Implementation-Vendor"   : "Kotori316",
                "Implementation-Timestamp": ZonedDateTime.now().format(timeFormat),
                "Commit"                  : getCommit("1.17-fabric")
        ])
    }
}

// PUBLISH
def joinedLog = String.join("\n",
        "Additional Enchanted Miner for 1.17.1 and Fabric.",
        "",
        isInCI() ? "RELEASED VIA Ci/CD. It may contain bugs." : "Manually built.",
        "",
        "Commit: ${getCommit('1.17-fabric')}",
        "",
        "Requires:",
        "",
        "* [Fabric API](https://www.curseforge.com/minecraft/mc-mods/fabric-api)",
        "* [Fabric Language Scala](https://www.curseforge.com/minecraft/mc-mods/fabric-language-scala)",
        "",
        "See https://github.com/Kotori316/QuarryPlus/commits/1.17-fabric to get all change log.",
        "",
        "Built with:",
        "",
        "* Minecraft ${project.minecraft_version}",
        "* Fabric API ${project.fabric_version}",
        "* Fabric Loader ${project.loader_version}",
)

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : (System.getenv("CURSEFORGE_KEY") ?: "")
    project {
        id = '282837'
        changelogType = 'markdown'
        addGameVersion 'Fabric'
        addGameVersion '1.17'
        addGameVersion '1.17.1'
        changelog = joinedLog
        releaseType = !isInCI() ? 'beta' : 'alpha'
        mainArtifact(remapJar) {
            displayName = "v" + project.version + "-fabric"
        }
        relations {
            requiredDependency 'fabric-language-scala'
            requiredDependency 'fabric-api'
            //noinspection SpellCheckingInspection
            // requiredDependency 'libblockattributes'
        }
    }
    options {
        curseGradleOptions.debug = false // defaults to false
        forgeGradleIntegration = false
        javaVersionAutoDetect = false
    }
}

githubRelease {
    repo.set('QuarryPlus')
    token = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN") ?: ""
    targetCommitish.set('1.17-fabric')
    prerelease.set(project.version.toString().contains("SNAPSHOT"))

    body.set(joinedLog)
    releaseAssets = fileTree("build/libs")
}

test {
    useJUnitPlatform()
}

static String getCommit(String branch) {
    try {
        ProcessBuilder builder = new ProcessBuilder("git", "rev-parse", branch)
        def process = builder.start()
        process.waitFor(1L, TimeUnit.SECONDS)
        def reader = new BufferedReader(new InputStreamReader(process.getInputStream()))
        def commit = reader.readLine()
        reader.close()
        return commit ?: ""
    } catch (IOException ignored) {
        if (!isInCI())
            println("Caught $ignored")
        return ""
    }
}

task CheckCompileOption() {
    doLast {
        List<String> strings = new ArrayList<>()
        strings.add("archivesBaseName: $archivesBaseName")
        strings.add("group: $group")
        println("Is in CI: " + isInCI())
        strings.add("project.group: ${project.group}")
        strings.add("version: $version")
        strings.add("runs: ${minecraft.getRunConfigs().asMap.toMapString()}")
        strings.add("Absolute Client RunDir: ${project.projectDir.toPath().resolve(minecraft.getRunConfigs().getByName("client").runDir).toAbsolutePath()}")
        strings.add("Absolute Server RunDir: ${project.projectDir.toPath().resolve(minecraft.getRunConfigs().getByName("server").runDir).toAbsolutePath()}")
        strings.add("-" * 20)
        strings.add("Jar: ${jar.getArchiveFile().get()}")
        strings.add("Remap Jar ${remapJar.getArchiveFile().get()}")
        strings.add("Source Jar ${sourcesJar.getArchiveFile().get()}")
        strings.add("RemapSource Jar ${remapSourcesJar.getOutput()}")
        strings.add(String.valueOf(fileTree("build/libs").getFiles()))
        strings.add("-" * 20)
        strings.add("Now: " + ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT))
        strings.add("Now in Japan: " + ZonedDateTime.now().withZoneSameInstant(ZoneId.of("Asia/Tokyo")).format(DateTimeFormatter.ISO_LOCAL_DATE_TIME))
        strings.add("-" * 20)
        strings.add("Repositories")
        for (def r : project.getRepositories()) {
            strings.add("${r.name} $r ${r instanceof MavenArtifactRepository ? r.getUrl() : "Not maven " + r.getClass()}")
        }

        println(strings.stream().collect(Collectors.joining(System.lineSeparator())))
        println("*" * 20)
        println("ChangeLog")
        println(joinedLog)
    }
}

task copyToDrive(type: Copy, dependsOn: "build") {
    def PATH_NAME = "drive_path"
    from(remapJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}

publishing {
    repositories {
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = "AdditionalEnchantedMiner-Fabric".toLowerCase()
            artifact remapJar
        }
    }
}

import java.nio.file.Files
import java.nio.file.Paths
import java.time.ZoneId
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import java.util.concurrent.TimeUnit
import java.util.stream.Collectors
import java.util.stream.Stream

buildscript {
    repositories {
        maven { url = 'https://maven.parchmentmc.org' }
        mavenCentral()
    }
    dependencies {
        classpath 'org.parchmentmc:librarian:1.+'
    }
}
plugins {
    id("maven-publish")
    id("scala")
    id 'net.minecraftforge.gradle' version '5.+'
    id "com.github.breadmoirai.github-release" version "2.2.12"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}
apply plugin: 'org.parchmentmc.librarian.forgegradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.

version = project.modVersion
group = 'com.kotori316' // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = 'AdditionalEnchantedMiner-' + project.minecraftVersion

java.toolchain.languageVersion = JavaLanguageVersion.of(17)

compileScala {
    scalaCompileOptions.additionalParameters = ["-Wconf:cat=deprecation:w,any:e"]
}

@SuppressWarnings("SpellCheckingInspection")
private static boolean isInCI() {
    return Boolean.parseBoolean(System.getenv("GITHUB_ACTIONS")) || Boolean.parseBoolean(System.getenv("CI")) ||
            (!System.getProperty("os.name").toLowerCase().startsWith("windows") && Files.exists(Paths.get("/", ".dockerenv")))
}

println("Java: ${System.getProperty('java.version')} " +
        "JVM: ${System.getProperty('java.vm.version')}(${System.getProperty('java.vendor')}) " +
        "Arch: ${System.getProperty('os.arch')}")
minecraft {
    mappings channel: 'parchment', version: ((project.parchmentMapping + "-" + project.minecraftVersion) as String)
//    mappings channel: 'official', version: (project.minecraftVersion as String)

    runs {
        client {
            workingDirectory project.file('Minecraft')
            property 'forge.logging.markers', 'REGISTRIES'
            property('mixin.env.remapRefMap', 'true')
            property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
            property "mixin.debug.export", "true"
            property 'forge.logging.console.level', 'debug'
            // From https://github.com/SlimeKnights/TinkersConstruct/blob/1.18/build.gradle
            if (project.hasProperty('mc_uuid')) {
                // Your uuid without any dashes in the middle
                args '--uuid', project.getProperty('mc_uuid')
            }
            if (project.hasProperty('mc_username')) {
                // Your username/display name, this is the name that shows up in chat
                // Note: This is not your email, even if you have a Mojang account
                args '--username', project.getProperty('mc_username')
            }
            // Your access token, you can find it in your '.minecraft/launcher_profiles.json' file
            // If not set, use "0" to prevent authentication exception.
            args '--accessToken', project.findProperty('mc_token') ?: "0"

            mods {
                quarryplus {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run-server')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property('mixin.env.remapRefMap', 'true')
            property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
            property "mixin.debug.export", "true"
            property 'forge.logging.console.level', 'info'
            forceExit false

            mods {
                quarryplus {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run-server')
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property('mixin.env.remapRefMap', 'true')
            property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
            property "mixin.debug.export", "true"
            property 'forge.logging.console.level', 'info'
            forceExit false
            args '--mod', 'quarryplus', '--all', '--output', file('src/generated/resources/')

            mods {
                quarryplus {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
        }

        gameTestServer {
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'
            property('mixin.env.remapRefMap', 'true')
            property('mixin.env.refMapRemappingFile', "${projectDir}/build/createSrgToMcp/output.srg")
            property "mixin.debug.export", "true"
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'QuarryPlus'.toLowerCase()
            workingDirectory file("${project.buildDir}/game_test")
            setForceExit(false)
            jvmArgs("-EnableAssertions".toLowerCase())

            mods {
                quarryplus {
                    source sourceSets.main
                    source sourceSets.test
                }
            }
            lazyToken("minecraft_classpath") {
                configurations.game_test.collect { it.absolutePath }.join(File.pathSeparator)
            }
        }
    }
}

task deleteGateTestWorld(type: Delete) {
    delete("${project.buildDir}/game_test")
    onlyIf { file("${project.buildDir}/game_test").exists() }
}

task copyGameTestTemplate(type: Copy, dependsOn: deleteGateTestWorld) {
    //noinspection SpellCheckingInspection
    String structureDir = "src/test/resources/data/quarryplus/gameteststructures/"
    from(structureDir)
    into("${project.buildDir}/game_test/gameteststructures/")
    onlyIf { file(structureDir).exists() }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

repositories {
    maven {
        // location of the maven that hosts JEI files
        //noinspection SpellCheckingInspection
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
        content {
            includeGroup("mezz.jei")
        }
    }
    /*maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven-k-4u.nl"
        url = "https://modmaven.dev/"
    }*/
    maven {
        name = "CraftTweaker"
        url = 'https://maven.blamejared.com'
        content {
            //noinspection SpellCheckingInspection
            includeModule("com.blamejared.crafttweaker", "CraftTweaker-1.16.4")
        }
    }

    maven {
        name = "FTB NEW"
        url = "https://maven.saps.dev/minecraft/"
        content {
            includeGroup("dev.ftb.mods")
            includeGroup("dev.latvian.mods")
        }
    }

    maven {
        name = "architectury"
        url = uri("https://maven.architectury.dev/")
        content {
            it.includeGroup("dev.architectury")
        }
    }

    maven {
        name = "Azure-SLP"
        url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
        content {
            it.includeVersion("com.kotori316", "ScalableCatsForce".toLowerCase(), project.slpVersion as String)
            it.includeVersion("com.kotori316", "test_utility", project.testUtilVersion as String)
            it.includeVersion("org.typelevel", "cats-core_2.13", project.catsVersion as String)
            it.includeVersion("org.typelevel", "cats-kernel_2.13", project.catsVersion as String)
        }
    }
    mavenLocal()
}

configurations {
    game_test
}

dependencies {
    String forgeVersion = System.getenv("CI_FORGE") ?: project.forgeVersion
    minecraft("net.minecraftforge:forge:" + forgeVersion)
    System.out.println(("Selected version: " + "net.minecraftforge:forge:" + forgeVersion) as String)
    compileOnly(group: 'org.scala-lang', name: 'scala-library', version: project.scalaVersion)
    compileOnly(group: 'org.typelevel', name: "cats-core_2.13", version: project.catsVersion)
    testCompileOnly(group: 'org.scala-lang', name: 'scala-library', version: project.scalaVersion)
    testCompileOnly(group: 'org.typelevel', name: "cats-core_2.13", version: project.catsVersion)

    compileOnly fg.deobf("mezz.jei:jei-1.18.2:" + project.jeiVersion)
    compileOnly(fg.deobf(group: "mezz.jei", name: "jei-1.19-forge-api", version: project.jeiVersion))
    runtimeOnly(fg.deobf(group: "mezz.jei", name: "jei-1.19-forge", version: project.jeiVersion))
    runtimeOnly(group: "com.kotori316", name: "ScalableCatsForce".toLowerCase(), version: project.slpVersion, classifier: "with-library") {
        transitive(false)
    }

    // FTB Chunks stuff
    compileOnly(fg.deobf(group: "dev.ftb.mods", name: "ftb-chunks-forge", version: project.ftbChunksVersion))
    // implementation
    compileOnly(fg.deobf(group: "dev.ftb.mods", name: "ftb-library-forge", version: project.ftbLibraryVersion))
    // implementation
    // runtimeOnly(fg.deobf(group: "dev.ftb.mods", name: "ftb-teams-forge", version: project.ftbTeamsVersion)) // runtimeOnly
    // runtimeOnly(fg.deobf(group: "dev.architectury", name: "architectury-forge", version: project.architecturyVersion)) // runtimeOnly

    // Test Dependencies.
    final def JUPITER_VERSION = '5.8.2'
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: JUPITER_VERSION)
    testImplementation(group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: JUPITER_VERSION)
    testRuntimeOnly(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: JUPITER_VERSION)
    // https://mvnrepository.com/artifact/org.junit.platform/junit-platform-launcher
    testImplementation(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.8.2')
    testImplementation(fg.deobf(group: "com.kotori316", name: "test_utility", version: project.testUtilVersion))

    game_test(group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: JUPITER_VERSION)
    game_test(group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: JUPITER_VERSION)
    game_test(group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: JUPITER_VERSION)
    game_test(group: 'org.junit.platform', name: 'junit-platform-launcher', version: '1.8.2')
}

// Example for how to get properties into the manifest for reading at runtime.
def jarAttributeMap = [
        "Specification-Title"     : project.name,
        "Specification-Vendor"    : "Kotori316",
        "Specification-Version"   : "1", // We are version 1 of ourselves
        "Implementation-Title"    : project.name,
        "Implementation-Version"  : project.version,
        "Implementation-Vendor"   : "Kotori316",
        "Implementation-Timestamp": ZonedDateTime.now().format(DateTimeFormatter.ISO_INSTANT),
        "Commit"                  : getCommit(project.branch as String),
        'Automatic-Module-Name'   : 'quarryplus',
]

jar {
    manifest {
        attributes(jarAttributeMap)
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/resources'
            srcDir 'src/generated/resources'
        }
    }
}

task srcJar(type: Jar) {
    from sourceSets.main.allSource
    archiveClassifier.set("sources")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

task deobfJar(type: Jar) {
    from sourceSets.main.output
    archiveClassifier.set("deobf")
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
    manifest {
        attributes(jarAttributeMap)
    }
}

// Tell the artifact system about our extra jars
artifacts {
    archives srcJar, deobfJar
}

// Example configuration to allow publishing using the maven-publish plugin
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')

jar.finalizedBy('signJar')

task signJar(dependsOn: 'reobfJar') {
    boolean executeCondition = project.hasProperty('keyStoreAlias') &&
            project.hasProperty('keyStore') &&
            project.hasProperty('keyStorePass')
    onlyIf { executeCondition }
    doLast {
        //noinspection HttpUrlsUsage
        ant.signjar(
                jar: jar.archiveFile.get(),
                alias: project.hasProperty('keyStoreAlias') ? project.getProperty('keyStoreAlias') : "",
                keystore: project.hasProperty('keyStore') ? project.getProperty("keyStore") : "",
                storepass: project.hasProperty('keyStorePass') ? project.getProperty('keyStorePass') : "",
                sigalg: "SHA1withRSA",
                digestalg: "SHA-256",
                tsaurl: "http://timestamp.digicert.com"
        )
    }
}

def changeLogHeader() {
    return ("""\
            For Minecraft ${project.minecraftVersion} and Minecraft Forge
            Released at ${ZonedDateTime.now(ZoneId.of('Asia/Tokyo')).withNano(0).format(DateTimeFormatter.ISO_OFFSET_DATE_TIME)}

            This mod requires [Scalable Cat's Force](https://www.curseforge.com/minecraft/mc-mods/scalable-cats-force)
            Build with ${project.forgeVersion}, Mapping: Official ${project.minecraftVersion}
            """ as String).stripIndent()
}

def combinedLog() {
    def header = changeLogHeader() + System.lineSeparator() * 2
    def file = new File("temp_changelog.md")
    def fileText = file.exists() ? file.text : "No changelog provided."
    return header + fileText
}

static String getCommit(String branch) {
    try {
        ProcessBuilder builder = new ProcessBuilder("git", "rev-parse", branch)
        def process = builder.start()
        process.waitFor(1L, TimeUnit.SECONDS)
        try (def stream = new InputStreamReader(process.getInputStream())
             def reader = new BufferedReader(stream)) {
            def commit = reader.readLine()
            return commit ?: ""
        }
    } catch (IOException ignored) {
        if (!isInCI())
            println("Caught $ignored")
        return ""
    }
}

String getChangeLog() {
    def header = changeLogHeader()
    def f = file("temp_changelog.md")
    if (f.exists()) {
        String version = f.readLines().find { s -> s.startsWith("#") }
        return header + System.lineSeparator() + Stream.concat(
                Stream.of(version, ""),
                f.readLines()
                        .drop(4 - 2)
                        .takeWhile { s -> !s.isEmpty() }
                        .stream() as Stream<String>
        ).collect(Collectors.joining(System.lineSeparator()))
    } else return header
}

curseforge {
    apiKey = project.hasProperty("curseforge_additional-enchanted-miner_key") ? getProperty("curseforge_additional-enchanted-miner_key") : ""
    project {
        id = '282837'
        changelogType = 'markdown'
        changelog = combinedLog()
        releaseType = 'release'
        addGameVersion(project.minecraftVersion)
        mainArtifact(jar) {
            displayName = 'v' + project.version + '-forge' + " [${project.minecraftVersion}]"
        }
        addArtifact deobfJar
        addArtifact srcJar
        relations {
            requiredDependency 'scalable-cats-force'
        }
    }
    options {
        curseGradleOptions.debug = false // defaults to false
        javaVersionAutoDetect = false
    }
}

githubRelease {
    repo.set('QuarryPlus')
    token = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN") ?: ""
    targetCommitish.set(project.branch as String)
    prerelease.set(project.version.toString().contains("SNAPSHOT"))
    body.set(getChangeLog())
    releaseAssets = files(
            jar,
            deobfJar,
            srcJar,
    )
}

test {
    useJUnitPlatform()
}

task CheckCompileOption() {
    setDescription("Verify the compile option.")
    doLast {
        System.out.println("Changelog for GitHub")
        System.out.println("-" * 30 as String)
        System.out.println(getChangeLog())
        System.out.println("-" * 30 as String)
        System.out.println("Git commit")
        System.out.println(getCommit(project.branch as String))
        System.out.println("-" * 30 as String)
    }
}

task copyToDrive(type: Copy, dependsOn: "build") {
    description = "Copy jar files to directory specified in environmental value of `drive_path`"
    def PATH_NAME = "drive_path"
    from(jar.getArchiveFile(), deobfJar.getArchiveFile(), srcJar.getArchiveFile())
    into(file(java.util.Optional.ofNullable(System.getenv(PATH_NAME)).orElse(".")))
    onlyIf {
        System.getenv(PATH_NAME) != null &&
                Files.exists(Paths.get(System.getenv(PATH_NAME)))
    }
}

publishing {
    repositories {
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/Kotori316/QuarryPlus")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR") ?: ""
                password = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN")
            }
        }
        maven {
            name = "AzureRepository"
            url = uri("https://pkgs.dev.azure.com/Kotori316/minecraft/_packaging/mods/maven/v1")
            credentials {
                username = project.findProperty("azureUserName") ?: System.getenv("AZURE_USER_NAME") ?: ""
                password = project.findProperty("azureToken") ?: System.getenv("AZURE_TOKEN") ?: "TOKEN"
            }
        }
    }
    publications {
        gpr(MavenPublication) {
            artifactId = "AdditionalEnchantedMiner".toLowerCase()
            artifact srcJar {
                getArchiveClassifier().set('sources')
                getArchiveExtension().set('jar')
            }
            artifact deobfJar {
                getArchiveClassifier().set('deobf')
                getArchiveExtension().set('jar')
            }
            artifact jar
            pom {
                name = archivesBaseName
                description = "QuarryPlus for Minecraft ${project.minecraftVersion} and Forge ${project.forgeVersion}"
                url = 'https://github.com/Kotori316/QuarryPlus'
                packaging = "jar"
            }
        }
    }
}
